/* 
 * Triple Play Pay API
 *
 * Payment API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tripleplaypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApiApiTests
    {
        private ApiApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApiApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApiApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApiApi
            //Assert.IsInstanceOfType(typeof(ApiApi), instance, "instance is a ApiApi");
        }

        /// <summary>
        /// Test Authorize
        /// </summary>
        [Test]
        public void AuthorizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string amount = null;
            //string cc = null;
            //string mm = null;
            //string yy = null;
            //string cvv = null;
            //string ticket = null;
            //Object meta = null;
            //var response = instance.Authorize(amount, cc, mm, yy, cvv, ticket, meta);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test CallVoid
        /// </summary>
        [Test]
        public void CallVoidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionId = null;
            //string ticket = null;
            //Object meta = null;
            //var response = instance.CallVoid(transactionId, ticket, meta);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test Charge
        /// </summary>
        [Test]
        public void ChargeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string amount = null;
            //string transactionId = null;
            //string cc = null;
            //string mm = null;
            //string yy = null;
            //string cvv = null;
            //string ticket = null;
            //Object meta = null;
            //var response = instance.Charge(amount, transactionId, cc, mm, yy, cvv, ticket, meta);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test Credit
        /// </summary>
        [Test]
        public void CreditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string amount = null;
            //string cc = null;
            //string mm = null;
            //string yy = null;
            //string cvv = null;
            //string ticket = null;
            //Object meta = null;
            //var response = instance.Credit(amount, cc, mm, yy, cvv, ticket, meta);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test Enroll
        /// </summary>
        [Test]
        public void EnrollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dbaName = null;
            //string email = null;
            //string website = null;
            //string fedTxId = null;
            //string legalName = null;
            //string startDate = null;
            //string accountHolderName = null;
            //string accountType = null;
            //string accountNumber = null;
            //string routingNumber = null;
            //List<string> ownershipType = null;
            //string businessDescription = null;
            //string businessPhoneNumber = null;
            //string businessAddress1 = null;
            //string businessAddress2 = null;
            //string businessCity = null;
            //string businessStateProvince = null;
            //string businessPostalCode = null;
            //string principleFirstName = null;
            //string principleLastName = null;
            //string principleSsn = null;
            //string principleDateOfBirth = null;
            //string principleAddressLine1 = null;
            //string principleAddressLine2 = null;
            //string principleCity = null;
            //string principleStateProvince = null;
            //string principlePostalCode = null;
            //string principleTitle = null;
            //string principleOwnershipPercentage = null;
            //string principlePhoneNumber = null;
            //string stockSymbol = null;
            //var response = instance.Enroll(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test Settle
        /// </summary>
        [Test]
        public void SettleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionId = null;
            //string ticket = null;
            //Object meta = null;
            //var response = instance.Settle(transactionId, ticket, meta);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
        /// <summary>
        /// Test Tokenize
        /// </summary>
        [Test]
        public void TokenizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cc = null;
            //string mm = null;
            //string yy = null;
            //string cvv = null;
            //var response = instance.Tokenize(cc, mm, yy, cvv);
            //Assert.IsInstanceOf<List<Response>> (response, "response is List<Response>");
        }
    }

}
