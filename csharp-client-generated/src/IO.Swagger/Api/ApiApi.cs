/* 
 * Triple Play Pay API
 *
 * Payment API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tripleplaypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <remarks>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Authorize (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <remarks>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> AuthorizeWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <remarks>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> CallVoid (string transactionId, string ticket = null, Object meta = null);

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <remarks>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> CallVoidWithHttpInfo (string transactionId, string ticket = null, Object meta = null);
        /// <summary>
        /// Charge a credit card or settle a previous charge.
        /// </summary>
        /// <remarks>
        /// Charge a credit card or settle a previous charge.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Charge (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// Charge a credit card or settle a previous charge.
        /// </summary>
        /// <remarks>
        /// Charge a credit card or settle a previous charge.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> ChargeWithHttpInfo (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <remarks>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Credit (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <remarks>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> CreditWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <remarks>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Enroll (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null);

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <remarks>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> EnrollWithHttpInfo (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null);
        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <remarks>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Settle (string transactionId, string ticket = null, Object meta = null);

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <remarks>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> SettleWithHttpInfo (string transactionId, string ticket = null, Object meta = null);
        /// <summary>
        /// Create a token for later use.
        /// </summary>
        /// <remarks>
        /// Create a token for later use.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>List&lt;Response&gt;</returns>
        List<Response> Tokenize (string cc, string mm, string yy, string cvv);

        /// <summary>
        /// Create a token for later use.
        /// </summary>
        /// <remarks>
        /// Create a token for later use.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        ApiResponse<List<Response>> TokenizeWithHttpInfo (string cc, string mm, string yy, string cvv);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <remarks>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> AuthorizeAsync (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <remarks>
        /// Used to verify funds when the total amount of the purchase is unknown.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> AuthorizeAsyncWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <remarks>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> CallVoidAsync (string transactionId, string ticket = null, Object meta = null);

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <remarks>
        /// A Void transaction can be used to back out a previous Sale transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> CallVoidAsyncWithHttpInfo (string transactionId, string ticket = null, Object meta = null);
        /// <summary>
        /// Charge a credit card or settle a previous charge.
        /// </summary>
        /// <remarks>
        /// Charge a credit card or settle a previous charge.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> ChargeAsync (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// Charge a credit card or settle a previous charge.
        /// </summary>
        /// <remarks>
        /// Charge a credit card or settle a previous charge.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> ChargeAsyncWithHttpInfo (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <remarks>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> CreditAsync (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <remarks>
        /// A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> CreditAsyncWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null);
        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <remarks>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> EnrollAsync (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null);

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <remarks>
        /// Enroll a new merchant or retrieve status of pending merchant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> EnrollAsyncWithHttpInfo (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null);
        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <remarks>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> SettleAsync (string transactionId, string ticket = null, Object meta = null);

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <remarks>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> SettleAsyncWithHttpInfo (string transactionId, string ticket = null, Object meta = null);
        /// <summary>
        /// Create a token for later use.
        /// </summary>
        /// <remarks>
        /// Create a token for later use.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        System.Threading.Tasks.Task<List<Response>> TokenizeAsync (string cc, string mm, string yy, string cvv);

        /// <summary>
        /// Create a token for later use.
        /// </summary>
        /// <remarks>
        /// Create a token for later use.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Response>>> TokenizeAsyncWithHttpInfo (string cc, string mm, string yy, string cvv);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ApiApi : IApiApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApiApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown. Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Authorize (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = AuthorizeWithHttpInfo(amount, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown. Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > AuthorizeWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Authorize");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Authorize");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Authorize");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Authorize");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Authorize");

            var localVarPath = "/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown. Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> AuthorizeAsync (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = await AuthorizeAsyncWithHttpInfo(amount, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Used to verify funds when the total amount of the purchase is unknown. Used to verify funds when the total amount of the purchase is unknown.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> AuthorizeAsyncWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Authorize");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Authorize");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Authorize");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Authorize");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Authorize");

            var localVarPath = "/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction. A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> CallVoid (string transactionId, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = CallVoidWithHttpInfo(transactionId, ticket, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction. A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > CallVoidWithHttpInfo (string transactionId, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->CallVoid");

            var localVarPath = "/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction. A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> CallVoidAsync (string transactionId, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = await CallVoidAsyncWithHttpInfo(transactionId, ticket, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A Void transaction can be used to back out a previous Sale transaction. A Void transaction can be used to back out a previous Sale transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> CallVoidAsyncWithHttpInfo (string transactionId, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->CallVoid");

            var localVarPath = "/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Charge a credit card or settle a previous charge. Charge a credit card or settle a previous charge.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Charge (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = ChargeWithHttpInfo(amount, transactionId, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Charge a credit card or settle a previous charge. Charge a credit card or settle a previous charge.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > ChargeWithHttpInfo (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Charge");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->Charge");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Charge");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Charge");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Charge");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Charge");

            var localVarPath = "/charge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Charge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Charge a credit card or settle a previous charge. Charge a credit card or settle a previous charge.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> ChargeAsync (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = await ChargeAsyncWithHttpInfo(amount, transactionId, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Charge a credit card or settle a previous charge. Charge a credit card or settle a previous charge.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="transactionId">Transaction ID used to settle an authorized card (cc info then not required)</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> ChargeAsyncWithHttpInfo (string amount, string transactionId, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Charge");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->Charge");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Charge");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Charge");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Charge");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Charge");

            var localVarPath = "/charge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Charge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction. A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Credit (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = CreditWithHttpInfo(amount, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction. A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > CreditWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Credit");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Credit");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Credit");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Credit");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Credit");

            var localVarPath = "/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Credit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction. A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> CreditAsync (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = await CreditAsyncWithHttpInfo(amount, cc, mm, yy, cvv, ticket, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A Credit transaction is used to refund a cardholder for a previous transaction. A Credit transaction is used to refund a cardholder for a previous transaction.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The total transaction amount. This is the amount of funds to move on the card</param>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit month</param>
        /// <param name="yy">2 digit year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> CreditAsyncWithHttpInfo (string amount, string cc, string mm, string yy, string cvv, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling ApiApi->Credit");
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Credit");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Credit");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Credit");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Credit");

            var localVarPath = "/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount", amount)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Credit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant. Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Enroll (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null)
        {
             ApiResponse<List<Response>> localVarResponse = EnrollWithHttpInfo(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant. Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > EnrollWithHttpInfo (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null)
        {
            // verify the required parameter 'dbaName' is set
            if (dbaName == null)
                throw new ApiException(400, "Missing required parameter 'dbaName' when calling ApiApi->Enroll");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ApiApi->Enroll");
            // verify the required parameter 'website' is set
            if (website == null)
                throw new ApiException(400, "Missing required parameter 'website' when calling ApiApi->Enroll");
            // verify the required parameter 'fedTxId' is set
            if (fedTxId == null)
                throw new ApiException(400, "Missing required parameter 'fedTxId' when calling ApiApi->Enroll");
            // verify the required parameter 'legalName' is set
            if (legalName == null)
                throw new ApiException(400, "Missing required parameter 'legalName' when calling ApiApi->Enroll");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApiApi->Enroll");
            // verify the required parameter 'accountHolderName' is set
            if (accountHolderName == null)
                throw new ApiException(400, "Missing required parameter 'accountHolderName' when calling ApiApi->Enroll");
            // verify the required parameter 'accountType' is set
            if (accountType == null)
                throw new ApiException(400, "Missing required parameter 'accountType' when calling ApiApi->Enroll");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'routingNumber' is set
            if (routingNumber == null)
                throw new ApiException(400, "Missing required parameter 'routingNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'ownershipType' is set
            if (ownershipType == null)
                throw new ApiException(400, "Missing required parameter 'ownershipType' when calling ApiApi->Enroll");
            // verify the required parameter 'businessDescription' is set
            if (businessDescription == null)
                throw new ApiException(400, "Missing required parameter 'businessDescription' when calling ApiApi->Enroll");
            // verify the required parameter 'businessPhoneNumber' is set
            if (businessPhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'businessPhoneNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'businessAddress1' is set
            if (businessAddress1 == null)
                throw new ApiException(400, "Missing required parameter 'businessAddress1' when calling ApiApi->Enroll");
            // verify the required parameter 'businessAddress2' is set
            if (businessAddress2 == null)
                throw new ApiException(400, "Missing required parameter 'businessAddress2' when calling ApiApi->Enroll");
            // verify the required parameter 'businessCity' is set
            if (businessCity == null)
                throw new ApiException(400, "Missing required parameter 'businessCity' when calling ApiApi->Enroll");
            // verify the required parameter 'businessStateProvince' is set
            if (businessStateProvince == null)
                throw new ApiException(400, "Missing required parameter 'businessStateProvince' when calling ApiApi->Enroll");
            // verify the required parameter 'businessPostalCode' is set
            if (businessPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'businessPostalCode' when calling ApiApi->Enroll");
            // verify the required parameter 'principleFirstName' is set
            if (principleFirstName == null)
                throw new ApiException(400, "Missing required parameter 'principleFirstName' when calling ApiApi->Enroll");
            // verify the required parameter 'principleLastName' is set
            if (principleLastName == null)
                throw new ApiException(400, "Missing required parameter 'principleLastName' when calling ApiApi->Enroll");
            // verify the required parameter 'principleSsn' is set
            if (principleSsn == null)
                throw new ApiException(400, "Missing required parameter 'principleSsn' when calling ApiApi->Enroll");
            // verify the required parameter 'principleDateOfBirth' is set
            if (principleDateOfBirth == null)
                throw new ApiException(400, "Missing required parameter 'principleDateOfBirth' when calling ApiApi->Enroll");
            // verify the required parameter 'principleAddressLine1' is set
            if (principleAddressLine1 == null)
                throw new ApiException(400, "Missing required parameter 'principleAddressLine1' when calling ApiApi->Enroll");
            // verify the required parameter 'principleAddressLine2' is set
            if (principleAddressLine2 == null)
                throw new ApiException(400, "Missing required parameter 'principleAddressLine2' when calling ApiApi->Enroll");
            // verify the required parameter 'principleCity' is set
            if (principleCity == null)
                throw new ApiException(400, "Missing required parameter 'principleCity' when calling ApiApi->Enroll");
            // verify the required parameter 'principleStateProvince' is set
            if (principleStateProvince == null)
                throw new ApiException(400, "Missing required parameter 'principleStateProvince' when calling ApiApi->Enroll");
            // verify the required parameter 'principlePostalCode' is set
            if (principlePostalCode == null)
                throw new ApiException(400, "Missing required parameter 'principlePostalCode' when calling ApiApi->Enroll");
            // verify the required parameter 'principleTitle' is set
            if (principleTitle == null)
                throw new ApiException(400, "Missing required parameter 'principleTitle' when calling ApiApi->Enroll");
            // verify the required parameter 'principleOwnershipPercentage' is set
            if (principleOwnershipPercentage == null)
                throw new ApiException(400, "Missing required parameter 'principleOwnershipPercentage' when calling ApiApi->Enroll");
            // verify the required parameter 'principlePhoneNumber' is set
            if (principlePhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'principlePhoneNumber' when calling ApiApi->Enroll");

            var localVarPath = "/enroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dba_name", dbaName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (website != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "website", website)); // query parameter
            if (fedTxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fed_tx_id", fedTxId)); // query parameter
            if (legalName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "legal_name", legalName)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (accountHolderName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_holder_name", accountHolderName)); // query parameter
            if (accountType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_type", accountType)); // query parameter
            if (accountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_number", accountNumber)); // query parameter
            if (routingNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "routing_number", routingNumber)); // query parameter
            if (stockSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stock_symbol", stockSymbol)); // query parameter
            if (ownershipType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ownership_type", ownershipType)); // query parameter
            if (businessDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_description", businessDescription)); // query parameter
            if (businessPhoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_phone_number", businessPhoneNumber)); // query parameter
            if (businessAddress1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_address_1", businessAddress1)); // query parameter
            if (businessAddress2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_address_2", businessAddress2)); // query parameter
            if (businessCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_city", businessCity)); // query parameter
            if (businessStateProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_state_province", businessStateProvince)); // query parameter
            if (businessPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_postal_code", businessPostalCode)); // query parameter
            if (principleFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_first_name", principleFirstName)); // query parameter
            if (principleLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_last_name", principleLastName)); // query parameter
            if (principleSsn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_ssn", principleSsn)); // query parameter
            if (principleDateOfBirth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_date_of_birth", principleDateOfBirth)); // query parameter
            if (principleAddressLine1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_address_line_1", principleAddressLine1)); // query parameter
            if (principleAddressLine2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_address_line_2", principleAddressLine2)); // query parameter
            if (principleCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_city", principleCity)); // query parameter
            if (principleStateProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_state_province", principleStateProvince)); // query parameter
            if (principlePostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_postal_code", principlePostalCode)); // query parameter
            if (principleTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_title", principleTitle)); // query parameter
            if (principleOwnershipPercentage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_ownership_percentage", principleOwnershipPercentage)); // query parameter
            if (principlePhoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_phone_number", principlePhoneNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Enroll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant. Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> EnrollAsync (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null)
        {
             ApiResponse<List<Response>> localVarResponse = await EnrollAsyncWithHttpInfo(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enroll a new merchant or retrieve status of pending merchant. Enroll a new merchant or retrieve status of pending merchant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbaName">Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET.</param>
        /// <param name="email"></param>
        /// <param name="website"></param>
        /// <param name="fedTxId"></param>
        /// <param name="legalName">Legal Business Name</param>
        /// <param name="startDate">Business Start Date</param>
        /// <param name="accountHolderName"></param>
        /// <param name="accountType"></param>
        /// <param name="accountNumber">Bank Account to deposit transactions. </param>
        /// <param name="routingNumber">Bank Routing Number to deposit transactions.</param>
        /// <param name="ownershipType">Select an ownership type:</param>
        /// <param name="businessDescription"></param>
        /// <param name="businessPhoneNumber"></param>
        /// <param name="businessAddress1"></param>
        /// <param name="businessAddress2"></param>
        /// <param name="businessCity"></param>
        /// <param name="businessStateProvince"></param>
        /// <param name="businessPostalCode"></param>
        /// <param name="principleFirstName">Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt;</param>
        /// <param name="principleLastName">Primary Owners Last Name.</param>
        /// <param name="principleSsn">Primary Owners Social Security Number</param>
        /// <param name="principleDateOfBirth"></param>
        /// <param name="principleAddressLine1"></param>
        /// <param name="principleAddressLine2"></param>
        /// <param name="principleCity"></param>
        /// <param name="principleStateProvince"></param>
        /// <param name="principlePostalCode"></param>
        /// <param name="principleTitle"></param>
        /// <param name="principleOwnershipPercentage"></param>
        /// <param name="principlePhoneNumber"></param>
        /// <param name="stockSymbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> EnrollAsyncWithHttpInfo (string dbaName, string email, string website, string fedTxId, string legalName, string startDate, string accountHolderName, string accountType, string accountNumber, string routingNumber, List<string> ownershipType, string businessDescription, string businessPhoneNumber, string businessAddress1, string businessAddress2, string businessCity, string businessStateProvince, string businessPostalCode, string principleFirstName, string principleLastName, string principleSsn, string principleDateOfBirth, string principleAddressLine1, string principleAddressLine2, string principleCity, string principleStateProvince, string principlePostalCode, string principleTitle, string principleOwnershipPercentage, string principlePhoneNumber, string stockSymbol = null)
        {
            // verify the required parameter 'dbaName' is set
            if (dbaName == null)
                throw new ApiException(400, "Missing required parameter 'dbaName' when calling ApiApi->Enroll");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling ApiApi->Enroll");
            // verify the required parameter 'website' is set
            if (website == null)
                throw new ApiException(400, "Missing required parameter 'website' when calling ApiApi->Enroll");
            // verify the required parameter 'fedTxId' is set
            if (fedTxId == null)
                throw new ApiException(400, "Missing required parameter 'fedTxId' when calling ApiApi->Enroll");
            // verify the required parameter 'legalName' is set
            if (legalName == null)
                throw new ApiException(400, "Missing required parameter 'legalName' when calling ApiApi->Enroll");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApiApi->Enroll");
            // verify the required parameter 'accountHolderName' is set
            if (accountHolderName == null)
                throw new ApiException(400, "Missing required parameter 'accountHolderName' when calling ApiApi->Enroll");
            // verify the required parameter 'accountType' is set
            if (accountType == null)
                throw new ApiException(400, "Missing required parameter 'accountType' when calling ApiApi->Enroll");
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'routingNumber' is set
            if (routingNumber == null)
                throw new ApiException(400, "Missing required parameter 'routingNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'ownershipType' is set
            if (ownershipType == null)
                throw new ApiException(400, "Missing required parameter 'ownershipType' when calling ApiApi->Enroll");
            // verify the required parameter 'businessDescription' is set
            if (businessDescription == null)
                throw new ApiException(400, "Missing required parameter 'businessDescription' when calling ApiApi->Enroll");
            // verify the required parameter 'businessPhoneNumber' is set
            if (businessPhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'businessPhoneNumber' when calling ApiApi->Enroll");
            // verify the required parameter 'businessAddress1' is set
            if (businessAddress1 == null)
                throw new ApiException(400, "Missing required parameter 'businessAddress1' when calling ApiApi->Enroll");
            // verify the required parameter 'businessAddress2' is set
            if (businessAddress2 == null)
                throw new ApiException(400, "Missing required parameter 'businessAddress2' when calling ApiApi->Enroll");
            // verify the required parameter 'businessCity' is set
            if (businessCity == null)
                throw new ApiException(400, "Missing required parameter 'businessCity' when calling ApiApi->Enroll");
            // verify the required parameter 'businessStateProvince' is set
            if (businessStateProvince == null)
                throw new ApiException(400, "Missing required parameter 'businessStateProvince' when calling ApiApi->Enroll");
            // verify the required parameter 'businessPostalCode' is set
            if (businessPostalCode == null)
                throw new ApiException(400, "Missing required parameter 'businessPostalCode' when calling ApiApi->Enroll");
            // verify the required parameter 'principleFirstName' is set
            if (principleFirstName == null)
                throw new ApiException(400, "Missing required parameter 'principleFirstName' when calling ApiApi->Enroll");
            // verify the required parameter 'principleLastName' is set
            if (principleLastName == null)
                throw new ApiException(400, "Missing required parameter 'principleLastName' when calling ApiApi->Enroll");
            // verify the required parameter 'principleSsn' is set
            if (principleSsn == null)
                throw new ApiException(400, "Missing required parameter 'principleSsn' when calling ApiApi->Enroll");
            // verify the required parameter 'principleDateOfBirth' is set
            if (principleDateOfBirth == null)
                throw new ApiException(400, "Missing required parameter 'principleDateOfBirth' when calling ApiApi->Enroll");
            // verify the required parameter 'principleAddressLine1' is set
            if (principleAddressLine1 == null)
                throw new ApiException(400, "Missing required parameter 'principleAddressLine1' when calling ApiApi->Enroll");
            // verify the required parameter 'principleAddressLine2' is set
            if (principleAddressLine2 == null)
                throw new ApiException(400, "Missing required parameter 'principleAddressLine2' when calling ApiApi->Enroll");
            // verify the required parameter 'principleCity' is set
            if (principleCity == null)
                throw new ApiException(400, "Missing required parameter 'principleCity' when calling ApiApi->Enroll");
            // verify the required parameter 'principleStateProvince' is set
            if (principleStateProvince == null)
                throw new ApiException(400, "Missing required parameter 'principleStateProvince' when calling ApiApi->Enroll");
            // verify the required parameter 'principlePostalCode' is set
            if (principlePostalCode == null)
                throw new ApiException(400, "Missing required parameter 'principlePostalCode' when calling ApiApi->Enroll");
            // verify the required parameter 'principleTitle' is set
            if (principleTitle == null)
                throw new ApiException(400, "Missing required parameter 'principleTitle' when calling ApiApi->Enroll");
            // verify the required parameter 'principleOwnershipPercentage' is set
            if (principleOwnershipPercentage == null)
                throw new ApiException(400, "Missing required parameter 'principleOwnershipPercentage' when calling ApiApi->Enroll");
            // verify the required parameter 'principlePhoneNumber' is set
            if (principlePhoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'principlePhoneNumber' when calling ApiApi->Enroll");

            var localVarPath = "/enroll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dba_name", dbaName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (website != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "website", website)); // query parameter
            if (fedTxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fed_tx_id", fedTxId)); // query parameter
            if (legalName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "legal_name", legalName)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (accountHolderName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_holder_name", accountHolderName)); // query parameter
            if (accountType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_type", accountType)); // query parameter
            if (accountNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_number", accountNumber)); // query parameter
            if (routingNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "routing_number", routingNumber)); // query parameter
            if (stockSymbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stock_symbol", stockSymbol)); // query parameter
            if (ownershipType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ownership_type", ownershipType)); // query parameter
            if (businessDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_description", businessDescription)); // query parameter
            if (businessPhoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_phone_number", businessPhoneNumber)); // query parameter
            if (businessAddress1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_address_1", businessAddress1)); // query parameter
            if (businessAddress2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_address_2", businessAddress2)); // query parameter
            if (businessCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_city", businessCity)); // query parameter
            if (businessStateProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_state_province", businessStateProvince)); // query parameter
            if (businessPostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_postal_code", businessPostalCode)); // query parameter
            if (principleFirstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_first_name", principleFirstName)); // query parameter
            if (principleLastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_last_name", principleLastName)); // query parameter
            if (principleSsn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_ssn", principleSsn)); // query parameter
            if (principleDateOfBirth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_date_of_birth", principleDateOfBirth)); // query parameter
            if (principleAddressLine1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_address_line_1", principleAddressLine1)); // query parameter
            if (principleAddressLine2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_address_line_2", principleAddressLine2)); // query parameter
            if (principleCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_city", principleCity)); // query parameter
            if (principleStateProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_state_province", principleStateProvince)); // query parameter
            if (principlePostalCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_postal_code", principlePostalCode)); // query parameter
            if (principleTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_title", principleTitle)); // query parameter
            if (principleOwnershipPercentage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_ownership_percentage", principleOwnershipPercentage)); // query parameter
            if (principlePhoneNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "principle_phone_number", principlePhoneNumber)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Enroll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization. Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Settle (string transactionId, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = SettleWithHttpInfo(transactionId, ticket, meta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization. Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > SettleWithHttpInfo (string transactionId, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->Settle");

            var localVarPath = "/settle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Settle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization. Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> SettleAsync (string transactionId, string ticket = null, Object meta = null)
        {
             ApiResponse<List<Response>> localVarResponse = await SettleAsyncWithHttpInfo(transactionId, ticket, meta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization. Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction ID of charged event.</param>
        /// <param name="ticket">Ticket Number used by POS (optional)</param>
        /// <param name="meta">Optional user defined object to be returned with future response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> SettleAsyncWithHttpInfo (string transactionId, string ticket = null, Object meta = null)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ApiApi->Settle");

            var localVarPath = "/settle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter
            if (ticket != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticket", ticket)); // query parameter
            if (meta != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "meta", meta)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Settle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Create a token for later use. Create a token for later use.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>List&lt;Response&gt;</returns>
        public List<Response> Tokenize (string cc, string mm, string yy, string cvv)
        {
             ApiResponse<List<Response>> localVarResponse = TokenizeWithHttpInfo(cc, mm, yy, cvv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a token for later use. Create a token for later use.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>ApiResponse of List&lt;Response&gt;</returns>
        public ApiResponse< List<Response> > TokenizeWithHttpInfo (string cc, string mm, string yy, string cvv)
        {
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Tokenize");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Tokenize");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Tokenize");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Tokenize");

            var localVarPath = "/tokenize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Tokenize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

        /// <summary>
        /// Create a token for later use. Create a token for later use.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>Task of List&lt;Response&gt;</returns>
        public async System.Threading.Tasks.Task<List<Response>> TokenizeAsync (string cc, string mm, string yy, string cvv)
        {
             ApiResponse<List<Response>> localVarResponse = await TokenizeAsyncWithHttpInfo(cc, mm, yy, cvv);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a token for later use. Create a token for later use.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cc">Credit Card Number with or without dashes</param>
        /// <param name="mm">2 digit Month</param>
        /// <param name="yy">2 digit Year</param>
        /// <param name="cvv">Card Verification Value found on the card (CVV2, CVC2, CID)</param>
        /// <returns>Task of ApiResponse (List&lt;Response&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Response>>> TokenizeAsyncWithHttpInfo (string cc, string mm, string yy, string cvv)
        {
            // verify the required parameter 'cc' is set
            if (cc == null)
                throw new ApiException(400, "Missing required parameter 'cc' when calling ApiApi->Tokenize");
            // verify the required parameter 'mm' is set
            if (mm == null)
                throw new ApiException(400, "Missing required parameter 'mm' when calling ApiApi->Tokenize");
            // verify the required parameter 'yy' is set
            if (yy == null)
                throw new ApiException(400, "Missing required parameter 'yy' when calling ApiApi->Tokenize");
            // verify the required parameter 'cvv' is set
            if (cvv == null)
                throw new ApiException(400, "Missing required parameter 'cvv' when calling ApiApi->Tokenize");

            var localVarPath = "/tokenize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cc", cc)); // query parameter
            if (mm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mm", mm)); // query parameter
            if (yy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "yy", yy)); // query parameter
            if (cvv != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cvv", cvv)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Tokenize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Response>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Response>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Response>)));
        }

    }
}
