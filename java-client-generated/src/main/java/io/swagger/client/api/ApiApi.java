/*
 * Triple Play Pay API
 * Payment API
 *
 * OpenAPI spec version: 1.0.1-oas3
 * Contact: support@tripleplaypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient apiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for activate
     * @param activationCode Activation Code on Terminal Screen (required)
     * @param terminalId Custom Name of Terminal (required)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateCall(String activationCode, String terminalId, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activationCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activationCode", activationCode));
        if (terminalId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("terminalId", terminalId));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateValidateBeforeCall(String activationCode, String terminalId, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'activationCode' is set
        if (activationCode == null) {
            throw new ApiException("Missing the required parameter 'activationCode' when calling activate(Async)");
        }
        // verify the required parameter 'terminalId' is set
        if (terminalId == null) {
            throw new ApiException("Missing the required parameter 'terminalId' when calling activate(Async)");
        }
        
        com.squareup.okhttp.Call call = activateCall(activationCode, terminalId, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Setup new Credit Card Terminal.
     * Setup new Credit Card Terminal.
     * @param activationCode Activation Code on Terminal Screen (required)
     * @param terminalId Custom Name of Terminal (required)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> activate(String activationCode, String terminalId, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = activateWithHttpInfo(activationCode, terminalId, meta);
        return resp.getData();
    }

    /**
     * Setup new Credit Card Terminal.
     * Setup new Credit Card Terminal.
     * @param activationCode Activation Code on Terminal Screen (required)
     * @param terminalId Custom Name of Terminal (required)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> activateWithHttpInfo(String activationCode, String terminalId, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = activateValidateBeforeCall(activationCode, terminalId, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Setup new Credit Card Terminal. (asynchronously)
     * Setup new Credit Card Terminal.
     * @param activationCode Activation Code on Terminal Screen (required)
     * @param terminalId Custom Name of Terminal (required)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateAsync(String activationCode, String terminalId, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateValidateBeforeCall(activationCode, terminalId, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authorize
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorizeCall(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (cc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cc", cc));
        if (mm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mm", mm));
        if (yy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yy", yy));
        if (cvv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvv", cvv));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipcode", zipcode));
        if (ticket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticket", ticket));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeValidateBeforeCall(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling authorize(Async)");
        }
        // verify the required parameter 'cc' is set
        if (cc == null) {
            throw new ApiException("Missing the required parameter 'cc' when calling authorize(Async)");
        }
        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling authorize(Async)");
        }
        // verify the required parameter 'yy' is set
        if (yy == null) {
            throw new ApiException("Missing the required parameter 'yy' when calling authorize(Async)");
        }
        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling authorize(Async)");
        }
        
        com.squareup.okhttp.Call call = authorizeCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Used to verify funds when the total amount of the purchase is unknown.
     * Used to verify funds when the total amount of the purchase is unknown.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> authorize(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = authorizeWithHttpInfo(amount, cc, mm, yy, cvv, zipcode, ticket, meta);
        return resp.getData();
    }

    /**
     * Used to verify funds when the total amount of the purchase is unknown.
     * Used to verify funds when the total amount of the purchase is unknown.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> authorizeWithHttpInfo(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = authorizeValidateBeforeCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Used to verify funds when the total amount of the purchase is unknown. (asynchronously)
     * Used to verify funds when the total amount of the purchase is unknown.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeAsync(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeValidateBeforeCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for callVoid
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call callVoidCall(String id, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/void";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ticket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticket", ticket));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call callVoidValidateBeforeCall(String id, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callVoid(Async)");
        }
        
        com.squareup.okhttp.Call call = callVoidCall(id, ticket, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * A Void transaction can be used to back out a previous Sale transaction.
     * A Void transaction can be used to back out a previous Sale transaction.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> callVoid(String id, String ticket, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = callVoidWithHttpInfo(id, ticket, meta);
        return resp.getData();
    }

    /**
     * A Void transaction can be used to back out a previous Sale transaction.
     * A Void transaction can be used to back out a previous Sale transaction.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> callVoidWithHttpInfo(String id, String ticket, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = callVoidValidateBeforeCall(id, ticket, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A Void transaction can be used to back out a previous Sale transaction. (asynchronously)
     * A Void transaction can be used to back out a previous Sale transaction.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call callVoidAsync(String id, String ticket, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = callVoidValidateBeforeCall(id, ticket, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for charge
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param accountNumber Bank Account Number (required)
     * @param routingNumber Bank Routing Number (required)
     * @param type Options: checking, savings *default checking (required)
     * @param id Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId (optional)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chargeCall(String amount, String cc, String mm, String yy, String cvv, String accountNumber, String routingNumber, String type, String id, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (cc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cc", cc));
        if (mm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mm", mm));
        if (yy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yy", yy));
        if (cvv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvv", cvv));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipcode", zipcode));
        if (accountNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountNumber", accountNumber));
        if (routingNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("routingNumber", routingNumber));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (ticket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticket", ticket));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chargeValidateBeforeCall(String amount, String cc, String mm, String yy, String cvv, String accountNumber, String routingNumber, String type, String id, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling charge(Async)");
        }
        // verify the required parameter 'cc' is set
        if (cc == null) {
            throw new ApiException("Missing the required parameter 'cc' when calling charge(Async)");
        }
        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling charge(Async)");
        }
        // verify the required parameter 'yy' is set
        if (yy == null) {
            throw new ApiException("Missing the required parameter 'yy' when calling charge(Async)");
        }
        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling charge(Async)");
        }
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling charge(Async)");
        }
        // verify the required parameter 'routingNumber' is set
        if (routingNumber == null) {
            throw new ApiException("Missing the required parameter 'routingNumber' when calling charge(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling charge(Async)");
        }
        
        com.squareup.okhttp.Call call = chargeCall(amount, cc, mm, yy, cvv, accountNumber, routingNumber, type, id, zipcode, ticket, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Process payment or settle a previous charge. *card **bank
     * Process payment or settle a previous charge. *card **bank
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param accountNumber Bank Account Number (required)
     * @param routingNumber Bank Routing Number (required)
     * @param type Options: checking, savings *default checking (required)
     * @param id Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId (optional)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> charge(String amount, String cc, String mm, String yy, String cvv, String accountNumber, String routingNumber, String type, String id, String zipcode, String ticket, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = chargeWithHttpInfo(amount, cc, mm, yy, cvv, accountNumber, routingNumber, type, id, zipcode, ticket, meta);
        return resp.getData();
    }

    /**
     * Process payment or settle a previous charge. *card **bank
     * Process payment or settle a previous charge. *card **bank
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param accountNumber Bank Account Number (required)
     * @param routingNumber Bank Routing Number (required)
     * @param type Options: checking, savings *default checking (required)
     * @param id Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId (optional)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> chargeWithHttpInfo(String amount, String cc, String mm, String yy, String cvv, String accountNumber, String routingNumber, String type, String id, String zipcode, String ticket, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = chargeValidateBeforeCall(amount, cc, mm, yy, cvv, accountNumber, routingNumber, type, id, zipcode, ticket, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process payment or settle a previous charge. *card **bank (asynchronously)
     * Process payment or settle a previous charge. *card **bank
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param accountNumber Bank Account Number (required)
     * @param routingNumber Bank Routing Number (required)
     * @param type Options: checking, savings *default checking (required)
     * @param id Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId (optional)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargeAsync(String amount, String cc, String mm, String yy, String cvv, String accountNumber, String routingNumber, String type, String id, String zipcode, String ticket, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargeValidateBeforeCall(amount, cc, mm, yy, cvv, accountNumber, routingNumber, type, id, zipcode, ticket, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credit
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call creditCall(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/credit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (cc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cc", cc));
        if (mm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mm", mm));
        if (yy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yy", yy));
        if (cvv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvv", cvv));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipcode", zipcode));
        if (ticket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticket", ticket));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call creditValidateBeforeCall(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling credit(Async)");
        }
        // verify the required parameter 'cc' is set
        if (cc == null) {
            throw new ApiException("Missing the required parameter 'cc' when calling credit(Async)");
        }
        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling credit(Async)");
        }
        // verify the required parameter 'yy' is set
        if (yy == null) {
            throw new ApiException("Missing the required parameter 'yy' when calling credit(Async)");
        }
        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling credit(Async)");
        }
        
        com.squareup.okhttp.Call call = creditCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> credit(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = creditWithHttpInfo(amount, cc, mm, yy, cvv, zipcode, ticket, meta);
        return resp.getData();
    }

    /**
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> creditWithHttpInfo(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = creditValidateBeforeCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A Credit transaction is used to refund a cardholder for a previous transaction. (asynchronously)
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     * @param amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit month (required)
     * @param yy 2 digit year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param zipcode Zip code. *optional synonym: zip (optional)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call creditAsync(String amount, String cc, String mm, String yy, String cvv, String zipcode, String ticket, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = creditValidateBeforeCall(amount, cc, mm, yy, cvv, zipcode, ticket, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enroll
     * @param dbaName Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param email  (required)
     * @param website  (required)
     * @param fedTxId  (required)
     * @param legalName Legal Business Name (required)
     * @param startDate Business Start Date (required)
     * @param accountHolderName  (required)
     * @param accountType  (required)
     * @param accountNumber Bank Account to deposit transactions.  (required)
     * @param routingNumber Bank Routing Number to deposit transactions. (required)
     * @param ownershipType [\&quot;Sole Proprietor\&quot;, \&quot;C-Corp Private\&quot;, \&quot;C-Corp Public\&quot;, \&quot;S-Corp Private\&quot;, \&quot;S-Corp Public\&quot;, \&quot;LLC Private\&quot;, \&quot;LLC Public\&quot;, \&quot;Not For Profit\&quot;, \&quot;Partnership Private\&quot;, \&quot;Partnership\&quot;, \&quot;Government Agency\&quot;] (required)
     * @param businessDescription  (required)
     * @param businessPhoneNumber  (required)
     * @param businessAddress1  (required)
     * @param businessAddress2  (required)
     * @param businessCity  (required)
     * @param businessStateProvince  (required)
     * @param businessPostalCode  (required)
     * @param principleFirstName Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param principleLastName Primary Owners Last Name. (required)
     * @param principleSsn Primary Owners Social Security Number (required)
     * @param principleDateOfBirth  (required)
     * @param principleAddressLine1  (required)
     * @param principleAddressLine2  (required)
     * @param principleCity  (required)
     * @param principleStateProvince  (required)
     * @param principlePostalCode  (required)
     * @param principleTitle  (required)
     * @param principleOwnershipPercentage  (required)
     * @param principlePhoneNumber  (required)
     * @param stockSymbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enrollCall(String dbaName, String email, String website, String fedTxId, String legalName, String startDate, String accountHolderName, String accountType, String accountNumber, String routingNumber, String ownershipType, String businessDescription, String businessPhoneNumber, String businessAddress1, String businessAddress2, String businessCity, String businessStateProvince, String businessPostalCode, String principleFirstName, String principleLastName, String principleSsn, String principleDateOfBirth, String principleAddressLine1, String principleAddressLine2, String principleCity, String principleStateProvince, String principlePostalCode, String principleTitle, String principleOwnershipPercentage, String principlePhoneNumber, String stockSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/enroll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dbaName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dba_name", dbaName));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (website != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("website", website));
        if (fedTxId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fed_tx_id", fedTxId));
        if (legalName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("legal_name", legalName));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (accountHolderName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account_holder_name", accountHolderName));
        if (accountType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account_type", accountType));
        if (accountNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account_number", accountNumber));
        if (routingNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("routing_number", routingNumber));
        if (stockSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stock_symbol", stockSymbol));
        if (ownershipType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownership_type", ownershipType));
        if (businessDescription != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_description", businessDescription));
        if (businessPhoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_phone_number", businessPhoneNumber));
        if (businessAddress1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_address_1", businessAddress1));
        if (businessAddress2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_address_2", businessAddress2));
        if (businessCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_city", businessCity));
        if (businessStateProvince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_state_province", businessStateProvince));
        if (businessPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("business_postal_code", businessPostalCode));
        if (principleFirstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_first_name", principleFirstName));
        if (principleLastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_last_name", principleLastName));
        if (principleSsn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_ssn", principleSsn));
        if (principleDateOfBirth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_date_of_birth", principleDateOfBirth));
        if (principleAddressLine1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_address_line_1", principleAddressLine1));
        if (principleAddressLine2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_address_line_2", principleAddressLine2));
        if (principleCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_city", principleCity));
        if (principleStateProvince != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_state_province", principleStateProvince));
        if (principlePostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_postal_code", principlePostalCode));
        if (principleTitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_title", principleTitle));
        if (principleOwnershipPercentage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_ownership_percentage", principleOwnershipPercentage));
        if (principlePhoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("principle_phone_number", principlePhoneNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enrollValidateBeforeCall(String dbaName, String email, String website, String fedTxId, String legalName, String startDate, String accountHolderName, String accountType, String accountNumber, String routingNumber, String ownershipType, String businessDescription, String businessPhoneNumber, String businessAddress1, String businessAddress2, String businessCity, String businessStateProvince, String businessPostalCode, String principleFirstName, String principleLastName, String principleSsn, String principleDateOfBirth, String principleAddressLine1, String principleAddressLine2, String principleCity, String principleStateProvince, String principlePostalCode, String principleTitle, String principleOwnershipPercentage, String principlePhoneNumber, String stockSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dbaName' is set
        if (dbaName == null) {
            throw new ApiException("Missing the required parameter 'dbaName' when calling enroll(Async)");
        }
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling enroll(Async)");
        }
        // verify the required parameter 'website' is set
        if (website == null) {
            throw new ApiException("Missing the required parameter 'website' when calling enroll(Async)");
        }
        // verify the required parameter 'fedTxId' is set
        if (fedTxId == null) {
            throw new ApiException("Missing the required parameter 'fedTxId' when calling enroll(Async)");
        }
        // verify the required parameter 'legalName' is set
        if (legalName == null) {
            throw new ApiException("Missing the required parameter 'legalName' when calling enroll(Async)");
        }
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling enroll(Async)");
        }
        // verify the required parameter 'accountHolderName' is set
        if (accountHolderName == null) {
            throw new ApiException("Missing the required parameter 'accountHolderName' when calling enroll(Async)");
        }
        // verify the required parameter 'accountType' is set
        if (accountType == null) {
            throw new ApiException("Missing the required parameter 'accountType' when calling enroll(Async)");
        }
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling enroll(Async)");
        }
        // verify the required parameter 'routingNumber' is set
        if (routingNumber == null) {
            throw new ApiException("Missing the required parameter 'routingNumber' when calling enroll(Async)");
        }
        // verify the required parameter 'ownershipType' is set
        if (ownershipType == null) {
            throw new ApiException("Missing the required parameter 'ownershipType' when calling enroll(Async)");
        }
        // verify the required parameter 'businessDescription' is set
        if (businessDescription == null) {
            throw new ApiException("Missing the required parameter 'businessDescription' when calling enroll(Async)");
        }
        // verify the required parameter 'businessPhoneNumber' is set
        if (businessPhoneNumber == null) {
            throw new ApiException("Missing the required parameter 'businessPhoneNumber' when calling enroll(Async)");
        }
        // verify the required parameter 'businessAddress1' is set
        if (businessAddress1 == null) {
            throw new ApiException("Missing the required parameter 'businessAddress1' when calling enroll(Async)");
        }
        // verify the required parameter 'businessAddress2' is set
        if (businessAddress2 == null) {
            throw new ApiException("Missing the required parameter 'businessAddress2' when calling enroll(Async)");
        }
        // verify the required parameter 'businessCity' is set
        if (businessCity == null) {
            throw new ApiException("Missing the required parameter 'businessCity' when calling enroll(Async)");
        }
        // verify the required parameter 'businessStateProvince' is set
        if (businessStateProvince == null) {
            throw new ApiException("Missing the required parameter 'businessStateProvince' when calling enroll(Async)");
        }
        // verify the required parameter 'businessPostalCode' is set
        if (businessPostalCode == null) {
            throw new ApiException("Missing the required parameter 'businessPostalCode' when calling enroll(Async)");
        }
        // verify the required parameter 'principleFirstName' is set
        if (principleFirstName == null) {
            throw new ApiException("Missing the required parameter 'principleFirstName' when calling enroll(Async)");
        }
        // verify the required parameter 'principleLastName' is set
        if (principleLastName == null) {
            throw new ApiException("Missing the required parameter 'principleLastName' when calling enroll(Async)");
        }
        // verify the required parameter 'principleSsn' is set
        if (principleSsn == null) {
            throw new ApiException("Missing the required parameter 'principleSsn' when calling enroll(Async)");
        }
        // verify the required parameter 'principleDateOfBirth' is set
        if (principleDateOfBirth == null) {
            throw new ApiException("Missing the required parameter 'principleDateOfBirth' when calling enroll(Async)");
        }
        // verify the required parameter 'principleAddressLine1' is set
        if (principleAddressLine1 == null) {
            throw new ApiException("Missing the required parameter 'principleAddressLine1' when calling enroll(Async)");
        }
        // verify the required parameter 'principleAddressLine2' is set
        if (principleAddressLine2 == null) {
            throw new ApiException("Missing the required parameter 'principleAddressLine2' when calling enroll(Async)");
        }
        // verify the required parameter 'principleCity' is set
        if (principleCity == null) {
            throw new ApiException("Missing the required parameter 'principleCity' when calling enroll(Async)");
        }
        // verify the required parameter 'principleStateProvince' is set
        if (principleStateProvince == null) {
            throw new ApiException("Missing the required parameter 'principleStateProvince' when calling enroll(Async)");
        }
        // verify the required parameter 'principlePostalCode' is set
        if (principlePostalCode == null) {
            throw new ApiException("Missing the required parameter 'principlePostalCode' when calling enroll(Async)");
        }
        // verify the required parameter 'principleTitle' is set
        if (principleTitle == null) {
            throw new ApiException("Missing the required parameter 'principleTitle' when calling enroll(Async)");
        }
        // verify the required parameter 'principleOwnershipPercentage' is set
        if (principleOwnershipPercentage == null) {
            throw new ApiException("Missing the required parameter 'principleOwnershipPercentage' when calling enroll(Async)");
        }
        // verify the required parameter 'principlePhoneNumber' is set
        if (principlePhoneNumber == null) {
            throw new ApiException("Missing the required parameter 'principlePhoneNumber' when calling enroll(Async)");
        }
        
        com.squareup.okhttp.Call call = enrollCall(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enroll a new merchant or retrieve status of pending merchant.
     * Enroll a new merchant or retrieve status of pending merchant.
     * @param dbaName Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param email  (required)
     * @param website  (required)
     * @param fedTxId  (required)
     * @param legalName Legal Business Name (required)
     * @param startDate Business Start Date (required)
     * @param accountHolderName  (required)
     * @param accountType  (required)
     * @param accountNumber Bank Account to deposit transactions.  (required)
     * @param routingNumber Bank Routing Number to deposit transactions. (required)
     * @param ownershipType [\&quot;Sole Proprietor\&quot;, \&quot;C-Corp Private\&quot;, \&quot;C-Corp Public\&quot;, \&quot;S-Corp Private\&quot;, \&quot;S-Corp Public\&quot;, \&quot;LLC Private\&quot;, \&quot;LLC Public\&quot;, \&quot;Not For Profit\&quot;, \&quot;Partnership Private\&quot;, \&quot;Partnership\&quot;, \&quot;Government Agency\&quot;] (required)
     * @param businessDescription  (required)
     * @param businessPhoneNumber  (required)
     * @param businessAddress1  (required)
     * @param businessAddress2  (required)
     * @param businessCity  (required)
     * @param businessStateProvince  (required)
     * @param businessPostalCode  (required)
     * @param principleFirstName Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param principleLastName Primary Owners Last Name. (required)
     * @param principleSsn Primary Owners Social Security Number (required)
     * @param principleDateOfBirth  (required)
     * @param principleAddressLine1  (required)
     * @param principleAddressLine2  (required)
     * @param principleCity  (required)
     * @param principleStateProvince  (required)
     * @param principlePostalCode  (required)
     * @param principleTitle  (required)
     * @param principleOwnershipPercentage  (required)
     * @param principlePhoneNumber  (required)
     * @param stockSymbol  (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> enroll(String dbaName, String email, String website, String fedTxId, String legalName, String startDate, String accountHolderName, String accountType, String accountNumber, String routingNumber, String ownershipType, String businessDescription, String businessPhoneNumber, String businessAddress1, String businessAddress2, String businessCity, String businessStateProvince, String businessPostalCode, String principleFirstName, String principleLastName, String principleSsn, String principleDateOfBirth, String principleAddressLine1, String principleAddressLine2, String principleCity, String principleStateProvince, String principlePostalCode, String principleTitle, String principleOwnershipPercentage, String principlePhoneNumber, String stockSymbol) throws ApiException {
        ApiResponse<List<Response>> resp = enrollWithHttpInfo(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol);
        return resp.getData();
    }

    /**
     * Enroll a new merchant or retrieve status of pending merchant.
     * Enroll a new merchant or retrieve status of pending merchant.
     * @param dbaName Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param email  (required)
     * @param website  (required)
     * @param fedTxId  (required)
     * @param legalName Legal Business Name (required)
     * @param startDate Business Start Date (required)
     * @param accountHolderName  (required)
     * @param accountType  (required)
     * @param accountNumber Bank Account to deposit transactions.  (required)
     * @param routingNumber Bank Routing Number to deposit transactions. (required)
     * @param ownershipType [\&quot;Sole Proprietor\&quot;, \&quot;C-Corp Private\&quot;, \&quot;C-Corp Public\&quot;, \&quot;S-Corp Private\&quot;, \&quot;S-Corp Public\&quot;, \&quot;LLC Private\&quot;, \&quot;LLC Public\&quot;, \&quot;Not For Profit\&quot;, \&quot;Partnership Private\&quot;, \&quot;Partnership\&quot;, \&quot;Government Agency\&quot;] (required)
     * @param businessDescription  (required)
     * @param businessPhoneNumber  (required)
     * @param businessAddress1  (required)
     * @param businessAddress2  (required)
     * @param businessCity  (required)
     * @param businessStateProvince  (required)
     * @param businessPostalCode  (required)
     * @param principleFirstName Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param principleLastName Primary Owners Last Name. (required)
     * @param principleSsn Primary Owners Social Security Number (required)
     * @param principleDateOfBirth  (required)
     * @param principleAddressLine1  (required)
     * @param principleAddressLine2  (required)
     * @param principleCity  (required)
     * @param principleStateProvince  (required)
     * @param principlePostalCode  (required)
     * @param principleTitle  (required)
     * @param principleOwnershipPercentage  (required)
     * @param principlePhoneNumber  (required)
     * @param stockSymbol  (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> enrollWithHttpInfo(String dbaName, String email, String website, String fedTxId, String legalName, String startDate, String accountHolderName, String accountType, String accountNumber, String routingNumber, String ownershipType, String businessDescription, String businessPhoneNumber, String businessAddress1, String businessAddress2, String businessCity, String businessStateProvince, String businessPostalCode, String principleFirstName, String principleLastName, String principleSsn, String principleDateOfBirth, String principleAddressLine1, String principleAddressLine2, String principleCity, String principleStateProvince, String principlePostalCode, String principleTitle, String principleOwnershipPercentage, String principlePhoneNumber, String stockSymbol) throws ApiException {
        com.squareup.okhttp.Call call = enrollValidateBeforeCall(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enroll a new merchant or retrieve status of pending merchant. (asynchronously)
     * Enroll a new merchant or retrieve status of pending merchant.
     * @param dbaName Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param email  (required)
     * @param website  (required)
     * @param fedTxId  (required)
     * @param legalName Legal Business Name (required)
     * @param startDate Business Start Date (required)
     * @param accountHolderName  (required)
     * @param accountType  (required)
     * @param accountNumber Bank Account to deposit transactions.  (required)
     * @param routingNumber Bank Routing Number to deposit transactions. (required)
     * @param ownershipType [\&quot;Sole Proprietor\&quot;, \&quot;C-Corp Private\&quot;, \&quot;C-Corp Public\&quot;, \&quot;S-Corp Private\&quot;, \&quot;S-Corp Public\&quot;, \&quot;LLC Private\&quot;, \&quot;LLC Public\&quot;, \&quot;Not For Profit\&quot;, \&quot;Partnership Private\&quot;, \&quot;Partnership\&quot;, \&quot;Government Agency\&quot;] (required)
     * @param businessDescription  (required)
     * @param businessPhoneNumber  (required)
     * @param businessAddress1  (required)
     * @param businessAddress2  (required)
     * @param businessCity  (required)
     * @param businessStateProvince  (required)
     * @param businessPostalCode  (required)
     * @param principleFirstName Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param principleLastName Primary Owners Last Name. (required)
     * @param principleSsn Primary Owners Social Security Number (required)
     * @param principleDateOfBirth  (required)
     * @param principleAddressLine1  (required)
     * @param principleAddressLine2  (required)
     * @param principleCity  (required)
     * @param principleStateProvince  (required)
     * @param principlePostalCode  (required)
     * @param principleTitle  (required)
     * @param principleOwnershipPercentage  (required)
     * @param principlePhoneNumber  (required)
     * @param stockSymbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enrollAsync(String dbaName, String email, String website, String fedTxId, String legalName, String startDate, String accountHolderName, String accountType, String accountNumber, String routingNumber, String ownershipType, String businessDescription, String businessPhoneNumber, String businessAddress1, String businessAddress2, String businessCity, String businessStateProvince, String businessPostalCode, String principleFirstName, String principleLastName, String principleSsn, String principleDateOfBirth, String principleAddressLine1, String principleAddressLine2, String principleCity, String principleStateProvince, String principlePostalCode, String principleTitle, String principleOwnershipPercentage, String principlePhoneNumber, String stockSymbol, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enrollValidateBeforeCall(dbaName, email, website, fedTxId, legalName, startDate, accountHolderName, accountType, accountNumber, routingNumber, ownershipType, businessDescription, businessPhoneNumber, businessAddress1, businessAddress2, businessCity, businessStateProvince, businessPostalCode, principleFirstName, principleLastName, principleSsn, principleDateOfBirth, principleAddressLine1, principleAddressLine2, principleCity, principleStateProvince, principlePostalCode, principleTitle, principleOwnershipPercentage, principlePhoneNumber, stockSymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for report
     * @param start Start of date range YYYY-MM-DD **defaults to that day (optional)
     * @param end End of date range YYYY-MM-DD (optional)
     * @param dates Optional list of range, example: [\&quot;YYYY-MM-DD\&quot;,\&quot;YYYY-MM-DD\&quot;] (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportCall(String start, String end, String dates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (dates != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dates", dates));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportValidateBeforeCall(String start, String end, String dates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = reportCall(start, end, dates, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get transaction detail history
     * Get transaction detail history
     * @param start Start of date range YYYY-MM-DD **defaults to that day (optional)
     * @param end End of date range YYYY-MM-DD (optional)
     * @param dates Optional list of range, example: [\&quot;YYYY-MM-DD\&quot;,\&quot;YYYY-MM-DD\&quot;] (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> report(String start, String end, String dates) throws ApiException {
        ApiResponse<List<Response>> resp = reportWithHttpInfo(start, end, dates);
        return resp.getData();
    }

    /**
     * Get transaction detail history
     * Get transaction detail history
     * @param start Start of date range YYYY-MM-DD **defaults to that day (optional)
     * @param end End of date range YYYY-MM-DD (optional)
     * @param dates Optional list of range, example: [\&quot;YYYY-MM-DD\&quot;,\&quot;YYYY-MM-DD\&quot;] (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> reportWithHttpInfo(String start, String end, String dates) throws ApiException {
        com.squareup.okhttp.Call call = reportValidateBeforeCall(start, end, dates, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get transaction detail history (asynchronously)
     * Get transaction detail history
     * @param start Start of date range YYYY-MM-DD **defaults to that day (optional)
     * @param end End of date range YYYY-MM-DD (optional)
     * @param dates Optional list of range, example: [\&quot;YYYY-MM-DD\&quot;,\&quot;YYYY-MM-DD\&quot;] (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportAsync(String start, String end, String dates, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportValidateBeforeCall(start, end, dates, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for settle
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call settleCall(String id, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/settle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ticket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticket", ticket));
        if (meta != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("meta", meta));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call settleValidateBeforeCall(String id, String ticket, Object meta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling settle(Async)");
        }
        
        com.squareup.okhttp.Call call = settleCall(id, ticket, meta, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> settle(String id, String ticket, Object meta) throws ApiException {
        ApiResponse<List<Response>> resp = settleWithHttpInfo(id, ticket, meta);
        return resp.getData();
    }

    /**
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> settleWithHttpInfo(String id, String ticket, Object meta) throws ApiException {
        com.squareup.okhttp.Call call = settleValidateBeforeCall(id, ticket, meta, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization. (asynchronously)
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     * @param id Transaction ID of charged event. *optional synonym: transactionId (required)
     * @param ticket Ticket Number used by POS (optional)
     * @param meta Optional user defined object to be returned with future response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call settleAsync(String id, String ticket, Object meta, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = settleValidateBeforeCall(id, ticket, meta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tokenize
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tokenizeCall(String cc, String mm, String yy, String cvv, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cc", cc));
        if (mm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mm", mm));
        if (yy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yy", yy));
        if (cvv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cvv", cvv));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tokenizeValidateBeforeCall(String cc, String mm, String yy, String cvv, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cc' is set
        if (cc == null) {
            throw new ApiException("Missing the required parameter 'cc' when calling tokenize(Async)");
        }
        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling tokenize(Async)");
        }
        // verify the required parameter 'yy' is set
        if (yy == null) {
            throw new ApiException("Missing the required parameter 'yy' when calling tokenize(Async)");
        }
        // verify the required parameter 'cvv' is set
        if (cvv == null) {
            throw new ApiException("Missing the required parameter 'cvv' when calling tokenize(Async)");
        }
        
        com.squareup.okhttp.Call call = tokenizeCall(cc, mm, yy, cvv, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a token for later use.
     * Create a token for later use.
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @return List&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Response> tokenize(String cc, String mm, String yy, String cvv) throws ApiException {
        ApiResponse<List<Response>> resp = tokenizeWithHttpInfo(cc, mm, yy, cvv);
        return resp.getData();
    }

    /**
     * Create a token for later use.
     * Create a token for later use.
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @return ApiResponse&lt;List&lt;Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Response>> tokenizeWithHttpInfo(String cc, String mm, String yy, String cvv) throws ApiException {
        com.squareup.okhttp.Call call = tokenizeValidateBeforeCall(cc, mm, yy, cvv, null, null);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a token for later use. (asynchronously)
     * Create a token for later use.
     * @param cc Credit Card Number with or without dashes (required)
     * @param mm 2 digit Month (required)
     * @param yy 2 digit Year (required)
     * @param cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tokenizeAsync(String cc, String mm, String yy, String cvv, final ApiCallback<List<Response>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tokenizeValidateBeforeCall(cc, mm, yy, cvv, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Response>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
