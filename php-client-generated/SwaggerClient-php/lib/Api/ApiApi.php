<?php
/**
 * ApiApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Triple Play Pay API
 *
 * Payment API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@tripleplaypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ApiApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorize
     *
     * Used to verify funds when the total amount of the purchase is unknown.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function authorize($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        list($response) = $this->authorizeWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);
        return $response;
    }

    /**
     * Operation authorizeWithHttpInfo
     *
     * Used to verify funds when the total amount of the purchase is unknown.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->authorizeRequest($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeAsync
     *
     * Used to verify funds when the total amount of the purchase is unknown.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeAsync($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        return $this->authorizeAsyncWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeAsyncWithHttpInfo
     *
     * Used to verify funds when the total amount of the purchase is unknown.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeAsyncWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->authorizeRequest($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorize'
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizeRequest($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling authorize'
            );
        }
        // verify the required parameter 'cc' is set
        if ($cc === null || (is_array($cc) && count($cc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cc when calling authorize'
            );
        }
        // verify the required parameter 'mm' is set
        if ($mm === null || (is_array($mm) && count($mm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mm when calling authorize'
            );
        }
        // verify the required parameter 'yy' is set
        if ($yy === null || (is_array($yy) && count($yy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $yy when calling authorize'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling authorize'
            );
        }

        $resourcePath = '/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($cc !== null) {
            $queryParams['cc'] = ObjectSerializer::toQueryValue($cc, null);
        }
        // query params
        if ($mm !== null) {
            $queryParams['mm'] = ObjectSerializer::toQueryValue($mm, null);
        }
        // query params
        if ($yy !== null) {
            $queryParams['yy'] = ObjectSerializer::toQueryValue($yy, null);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv, null);
        }
        // query params
        if ($ticket !== null) {
            $queryParams['ticket'] = ObjectSerializer::toQueryValue($ticket, null);
        }
        // query params
        if ($meta !== null) {
            $queryParams['meta'] = ObjectSerializer::toQueryValue($meta, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation charge
     *
     * Charge a credit card or settle a previous charge.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $transaction_id Transaction ID used to settle an authorized card (cc info then not required) (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function charge($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        list($response) = $this->chargeWithHttpInfo($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket, $meta);
        return $response;
    }

    /**
     * Operation chargeWithHttpInfo
     *
     * Charge a credit card or settle a previous charge.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $transaction_id Transaction ID used to settle an authorized card (cc info then not required) (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function chargeWithHttpInfo($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->chargeRequest($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargeAsync
     *
     * Charge a credit card or settle a previous charge.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $transaction_id Transaction ID used to settle an authorized card (cc info then not required) (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargeAsync($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        return $this->chargeAsyncWithHttpInfo($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargeAsyncWithHttpInfo
     *
     * Charge a credit card or settle a previous charge.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $transaction_id Transaction ID used to settle an authorized card (cc info then not required) (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargeAsyncWithHttpInfo($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->chargeRequest($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'charge'
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $transaction_id Transaction ID used to settle an authorized card (cc info then not required) (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargeRequest($amount, $transaction_id, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling charge'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling charge'
            );
        }
        // verify the required parameter 'cc' is set
        if ($cc === null || (is_array($cc) && count($cc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cc when calling charge'
            );
        }
        // verify the required parameter 'mm' is set
        if ($mm === null || (is_array($mm) && count($mm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mm when calling charge'
            );
        }
        // verify the required parameter 'yy' is set
        if ($yy === null || (is_array($yy) && count($yy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $yy when calling charge'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling charge'
            );
        }

        $resourcePath = '/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transactionId'] = ObjectSerializer::toQueryValue($transaction_id, null);
        }
        // query params
        if ($cc !== null) {
            $queryParams['cc'] = ObjectSerializer::toQueryValue($cc, null);
        }
        // query params
        if ($mm !== null) {
            $queryParams['mm'] = ObjectSerializer::toQueryValue($mm, null);
        }
        // query params
        if ($yy !== null) {
            $queryParams['yy'] = ObjectSerializer::toQueryValue($yy, null);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv, null);
        }
        // query params
        if ($ticket !== null) {
            $queryParams['ticket'] = ObjectSerializer::toQueryValue($ticket, null);
        }
        // query params
        if ($meta !== null) {
            $queryParams['meta'] = ObjectSerializer::toQueryValue($meta, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation credit
     *
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function credit($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        list($response) = $this->creditWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);
        return $response;
    }

    /**
     * Operation creditWithHttpInfo
     *
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->creditRequest($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditAsync
     *
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditAsync($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        return $this->creditAsyncWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditAsyncWithHttpInfo
     *
     * A Credit transaction is used to refund a cardholder for a previous transaction.
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditAsyncWithHttpInfo($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->creditRequest($amount, $cc, $mm, $yy, $cvv, $ticket, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'credit'
     *
     * @param  string $amount The total transaction amount. This is the amount of funds to move on the card (required)
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit month (required)
     * @param  string $yy 2 digit year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditRequest($amount, $cc, $mm, $yy, $cvv, $ticket = null, $meta = null)
    {
        // verify the required parameter 'amount' is set
        if ($amount === null || (is_array($amount) && count($amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount when calling credit'
            );
        }
        // verify the required parameter 'cc' is set
        if ($cc === null || (is_array($cc) && count($cc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cc when calling credit'
            );
        }
        // verify the required parameter 'mm' is set
        if ($mm === null || (is_array($mm) && count($mm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mm when calling credit'
            );
        }
        // verify the required parameter 'yy' is set
        if ($yy === null || (is_array($yy) && count($yy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $yy when calling credit'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling credit'
            );
        }

        $resourcePath = '/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($cc !== null) {
            $queryParams['cc'] = ObjectSerializer::toQueryValue($cc, null);
        }
        // query params
        if ($mm !== null) {
            $queryParams['mm'] = ObjectSerializer::toQueryValue($mm, null);
        }
        // query params
        if ($yy !== null) {
            $queryParams['yy'] = ObjectSerializer::toQueryValue($yy, null);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv, null);
        }
        // query params
        if ($ticket !== null) {
            $queryParams['ticket'] = ObjectSerializer::toQueryValue($ticket, null);
        }
        // query params
        if ($meta !== null) {
            $queryParams['meta'] = ObjectSerializer::toQueryValue($meta, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enroll
     *
     * Enroll a new merchant or retrieve status of pending merchant.
     *
     * @param  string $dba_name Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param  string $email email (required)
     * @param  string $website website (required)
     * @param  string $fed_tx_id fed_tx_id (required)
     * @param  string $legal_name Legal Business Name (required)
     * @param  string $start_date Business Start Date (required)
     * @param  string $account_holder_name account_holder_name (required)
     * @param  string $account_type account_type (required)
     * @param  string $account_number Bank Account to deposit transactions. (required)
     * @param  string $routing_number Bank Routing Number to deposit transactions. (required)
     * @param  string[] $ownership_type Select an ownership type: (required)
     * @param  string $business_description business_description (required)
     * @param  string $business_phone_number business_phone_number (required)
     * @param  string $business_address_1 business_address_1 (required)
     * @param  string $business_address_2 business_address_2 (required)
     * @param  string $business_city business_city (required)
     * @param  string $business_state_province business_state_province (required)
     * @param  string $business_postal_code business_postal_code (required)
     * @param  string $principle_first_name Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param  string $principle_last_name Primary Owners Last Name. (required)
     * @param  string $principle_ssn Primary Owners Social Security Number (required)
     * @param  string $principle_date_of_birth principle_date_of_birth (required)
     * @param  string $principle_address_line_1 principle_address_line_1 (required)
     * @param  string $principle_address_line_2 principle_address_line_2 (required)
     * @param  string $principle_city principle_city (required)
     * @param  string $principle_state_province principle_state_province (required)
     * @param  string $principle_postal_code principle_postal_code (required)
     * @param  string $principle_title principle_title (required)
     * @param  string $principle_ownership_percentage principle_ownership_percentage (required)
     * @param  string $principle_phone_number principle_phone_number (required)
     * @param  string $stock_symbol stock_symbol (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function enroll($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol = null)
    {
        list($response) = $this->enrollWithHttpInfo($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol);
        return $response;
    }

    /**
     * Operation enrollWithHttpInfo
     *
     * Enroll a new merchant or retrieve status of pending merchant.
     *
     * @param  string $dba_name Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param  string $email (required)
     * @param  string $website (required)
     * @param  string $fed_tx_id (required)
     * @param  string $legal_name Legal Business Name (required)
     * @param  string $start_date Business Start Date (required)
     * @param  string $account_holder_name (required)
     * @param  string $account_type (required)
     * @param  string $account_number Bank Account to deposit transactions. (required)
     * @param  string $routing_number Bank Routing Number to deposit transactions. (required)
     * @param  string[] $ownership_type Select an ownership type: (required)
     * @param  string $business_description (required)
     * @param  string $business_phone_number (required)
     * @param  string $business_address_1 (required)
     * @param  string $business_address_2 (required)
     * @param  string $business_city (required)
     * @param  string $business_state_province (required)
     * @param  string $business_postal_code (required)
     * @param  string $principle_first_name Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param  string $principle_last_name Primary Owners Last Name. (required)
     * @param  string $principle_ssn Primary Owners Social Security Number (required)
     * @param  string $principle_date_of_birth (required)
     * @param  string $principle_address_line_1 (required)
     * @param  string $principle_address_line_2 (required)
     * @param  string $principle_city (required)
     * @param  string $principle_state_province (required)
     * @param  string $principle_postal_code (required)
     * @param  string $principle_title (required)
     * @param  string $principle_ownership_percentage (required)
     * @param  string $principle_phone_number (required)
     * @param  string $stock_symbol (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollWithHttpInfo($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->enrollRequest($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enrollAsync
     *
     * Enroll a new merchant or retrieve status of pending merchant.
     *
     * @param  string $dba_name Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param  string $email (required)
     * @param  string $website (required)
     * @param  string $fed_tx_id (required)
     * @param  string $legal_name Legal Business Name (required)
     * @param  string $start_date Business Start Date (required)
     * @param  string $account_holder_name (required)
     * @param  string $account_type (required)
     * @param  string $account_number Bank Account to deposit transactions. (required)
     * @param  string $routing_number Bank Routing Number to deposit transactions. (required)
     * @param  string[] $ownership_type Select an ownership type: (required)
     * @param  string $business_description (required)
     * @param  string $business_phone_number (required)
     * @param  string $business_address_1 (required)
     * @param  string $business_address_2 (required)
     * @param  string $business_city (required)
     * @param  string $business_state_province (required)
     * @param  string $business_postal_code (required)
     * @param  string $principle_first_name Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param  string $principle_last_name Primary Owners Last Name. (required)
     * @param  string $principle_ssn Primary Owners Social Security Number (required)
     * @param  string $principle_date_of_birth (required)
     * @param  string $principle_address_line_1 (required)
     * @param  string $principle_address_line_2 (required)
     * @param  string $principle_city (required)
     * @param  string $principle_state_province (required)
     * @param  string $principle_postal_code (required)
     * @param  string $principle_title (required)
     * @param  string $principle_ownership_percentage (required)
     * @param  string $principle_phone_number (required)
     * @param  string $stock_symbol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrollAsync($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol = null)
    {
        return $this->enrollAsyncWithHttpInfo($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enrollAsyncWithHttpInfo
     *
     * Enroll a new merchant or retrieve status of pending merchant.
     *
     * @param  string $dba_name Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param  string $email (required)
     * @param  string $website (required)
     * @param  string $fed_tx_id (required)
     * @param  string $legal_name Legal Business Name (required)
     * @param  string $start_date Business Start Date (required)
     * @param  string $account_holder_name (required)
     * @param  string $account_type (required)
     * @param  string $account_number Bank Account to deposit transactions. (required)
     * @param  string $routing_number Bank Routing Number to deposit transactions. (required)
     * @param  string[] $ownership_type Select an ownership type: (required)
     * @param  string $business_description (required)
     * @param  string $business_phone_number (required)
     * @param  string $business_address_1 (required)
     * @param  string $business_address_2 (required)
     * @param  string $business_city (required)
     * @param  string $business_state_province (required)
     * @param  string $business_postal_code (required)
     * @param  string $principle_first_name Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param  string $principle_last_name Primary Owners Last Name. (required)
     * @param  string $principle_ssn Primary Owners Social Security Number (required)
     * @param  string $principle_date_of_birth (required)
     * @param  string $principle_address_line_1 (required)
     * @param  string $principle_address_line_2 (required)
     * @param  string $principle_city (required)
     * @param  string $principle_state_province (required)
     * @param  string $principle_postal_code (required)
     * @param  string $principle_title (required)
     * @param  string $principle_ownership_percentage (required)
     * @param  string $principle_phone_number (required)
     * @param  string $stock_symbol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrollAsyncWithHttpInfo($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->enrollRequest($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enroll'
     *
     * @param  string $dba_name Doing Business As name. &lt;code&gt;*&lt;/code&gt; Only field necessary for GET. (required)
     * @param  string $email (required)
     * @param  string $website (required)
     * @param  string $fed_tx_id (required)
     * @param  string $legal_name Legal Business Name (required)
     * @param  string $start_date Business Start Date (required)
     * @param  string $account_holder_name (required)
     * @param  string $account_type (required)
     * @param  string $account_number Bank Account to deposit transactions. (required)
     * @param  string $routing_number Bank Routing Number to deposit transactions. (required)
     * @param  string[] $ownership_type Select an ownership type: (required)
     * @param  string $business_description (required)
     * @param  string $business_phone_number (required)
     * @param  string $business_address_1 (required)
     * @param  string $business_address_2 (required)
     * @param  string $business_city (required)
     * @param  string $business_state_province (required)
     * @param  string $business_postal_code (required)
     * @param  string $principle_first_name Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: &lt;strong&gt;2principle_first_name&lt;/strong&gt; (required)
     * @param  string $principle_last_name Primary Owners Last Name. (required)
     * @param  string $principle_ssn Primary Owners Social Security Number (required)
     * @param  string $principle_date_of_birth (required)
     * @param  string $principle_address_line_1 (required)
     * @param  string $principle_address_line_2 (required)
     * @param  string $principle_city (required)
     * @param  string $principle_state_province (required)
     * @param  string $principle_postal_code (required)
     * @param  string $principle_title (required)
     * @param  string $principle_ownership_percentage (required)
     * @param  string $principle_phone_number (required)
     * @param  string $stock_symbol (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enrollRequest($dba_name, $email, $website, $fed_tx_id, $legal_name, $start_date, $account_holder_name, $account_type, $account_number, $routing_number, $ownership_type, $business_description, $business_phone_number, $business_address_1, $business_address_2, $business_city, $business_state_province, $business_postal_code, $principle_first_name, $principle_last_name, $principle_ssn, $principle_date_of_birth, $principle_address_line_1, $principle_address_line_2, $principle_city, $principle_state_province, $principle_postal_code, $principle_title, $principle_ownership_percentage, $principle_phone_number, $stock_symbol = null)
    {
        // verify the required parameter 'dba_name' is set
        if ($dba_name === null || (is_array($dba_name) && count($dba_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dba_name when calling enroll'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling enroll'
            );
        }
        // verify the required parameter 'website' is set
        if ($website === null || (is_array($website) && count($website) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $website when calling enroll'
            );
        }
        // verify the required parameter 'fed_tx_id' is set
        if ($fed_tx_id === null || (is_array($fed_tx_id) && count($fed_tx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fed_tx_id when calling enroll'
            );
        }
        // verify the required parameter 'legal_name' is set
        if ($legal_name === null || (is_array($legal_name) && count($legal_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legal_name when calling enroll'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling enroll'
            );
        }
        // verify the required parameter 'account_holder_name' is set
        if ($account_holder_name === null || (is_array($account_holder_name) && count($account_holder_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_holder_name when calling enroll'
            );
        }
        // verify the required parameter 'account_type' is set
        if ($account_type === null || (is_array($account_type) && count($account_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_type when calling enroll'
            );
        }
        // verify the required parameter 'account_number' is set
        if ($account_number === null || (is_array($account_number) && count($account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_number when calling enroll'
            );
        }
        // verify the required parameter 'routing_number' is set
        if ($routing_number === null || (is_array($routing_number) && count($routing_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $routing_number when calling enroll'
            );
        }
        // verify the required parameter 'ownership_type' is set
        if ($ownership_type === null || (is_array($ownership_type) && count($ownership_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ownership_type when calling enroll'
            );
        }
        // verify the required parameter 'business_description' is set
        if ($business_description === null || (is_array($business_description) && count($business_description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_description when calling enroll'
            );
        }
        // verify the required parameter 'business_phone_number' is set
        if ($business_phone_number === null || (is_array($business_phone_number) && count($business_phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_phone_number when calling enroll'
            );
        }
        // verify the required parameter 'business_address_1' is set
        if ($business_address_1 === null || (is_array($business_address_1) && count($business_address_1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_address_1 when calling enroll'
            );
        }
        // verify the required parameter 'business_address_2' is set
        if ($business_address_2 === null || (is_array($business_address_2) && count($business_address_2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_address_2 when calling enroll'
            );
        }
        // verify the required parameter 'business_city' is set
        if ($business_city === null || (is_array($business_city) && count($business_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_city when calling enroll'
            );
        }
        // verify the required parameter 'business_state_province' is set
        if ($business_state_province === null || (is_array($business_state_province) && count($business_state_province) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_state_province when calling enroll'
            );
        }
        // verify the required parameter 'business_postal_code' is set
        if ($business_postal_code === null || (is_array($business_postal_code) && count($business_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_postal_code when calling enroll'
            );
        }
        // verify the required parameter 'principle_first_name' is set
        if ($principle_first_name === null || (is_array($principle_first_name) && count($principle_first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_first_name when calling enroll'
            );
        }
        // verify the required parameter 'principle_last_name' is set
        if ($principle_last_name === null || (is_array($principle_last_name) && count($principle_last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_last_name when calling enroll'
            );
        }
        // verify the required parameter 'principle_ssn' is set
        if ($principle_ssn === null || (is_array($principle_ssn) && count($principle_ssn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_ssn when calling enroll'
            );
        }
        // verify the required parameter 'principle_date_of_birth' is set
        if ($principle_date_of_birth === null || (is_array($principle_date_of_birth) && count($principle_date_of_birth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_date_of_birth when calling enroll'
            );
        }
        // verify the required parameter 'principle_address_line_1' is set
        if ($principle_address_line_1 === null || (is_array($principle_address_line_1) && count($principle_address_line_1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_address_line_1 when calling enroll'
            );
        }
        // verify the required parameter 'principle_address_line_2' is set
        if ($principle_address_line_2 === null || (is_array($principle_address_line_2) && count($principle_address_line_2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_address_line_2 when calling enroll'
            );
        }
        // verify the required parameter 'principle_city' is set
        if ($principle_city === null || (is_array($principle_city) && count($principle_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_city when calling enroll'
            );
        }
        // verify the required parameter 'principle_state_province' is set
        if ($principle_state_province === null || (is_array($principle_state_province) && count($principle_state_province) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_state_province when calling enroll'
            );
        }
        // verify the required parameter 'principle_postal_code' is set
        if ($principle_postal_code === null || (is_array($principle_postal_code) && count($principle_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_postal_code when calling enroll'
            );
        }
        // verify the required parameter 'principle_title' is set
        if ($principle_title === null || (is_array($principle_title) && count($principle_title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_title when calling enroll'
            );
        }
        // verify the required parameter 'principle_ownership_percentage' is set
        if ($principle_ownership_percentage === null || (is_array($principle_ownership_percentage) && count($principle_ownership_percentage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_ownership_percentage when calling enroll'
            );
        }
        // verify the required parameter 'principle_phone_number' is set
        if ($principle_phone_number === null || (is_array($principle_phone_number) && count($principle_phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $principle_phone_number when calling enroll'
            );
        }

        $resourcePath = '/enroll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dba_name !== null) {
            $queryParams['dba_name'] = ObjectSerializer::toQueryValue($dba_name, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = ObjectSerializer::toQueryValue($website, null);
        }
        // query params
        if ($fed_tx_id !== null) {
            $queryParams['fed_tx_id'] = ObjectSerializer::toQueryValue($fed_tx_id, null);
        }
        // query params
        if ($legal_name !== null) {
            $queryParams['legal_name'] = ObjectSerializer::toQueryValue($legal_name, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($account_holder_name !== null) {
            $queryParams['account_holder_name'] = ObjectSerializer::toQueryValue($account_holder_name, null);
        }
        // query params
        if ($account_type !== null) {
            $queryParams['account_type'] = ObjectSerializer::toQueryValue($account_type, null);
        }
        // query params
        if ($account_number !== null) {
            $queryParams['account_number'] = ObjectSerializer::toQueryValue($account_number, null);
        }
        // query params
        if ($routing_number !== null) {
            $queryParams['routing_number'] = ObjectSerializer::toQueryValue($routing_number, null);
        }
        // query params
        if ($stock_symbol !== null) {
            $queryParams['stock_symbol'] = ObjectSerializer::toQueryValue($stock_symbol, null);
        }
        // query params
        if (is_array($ownership_type)) {
            $ownership_type = ObjectSerializer::serializeCollection($ownership_type, 'multi', true);
        }
        if ($ownership_type !== null) {
            $queryParams['ownership_type'] = ObjectSerializer::toQueryValue($ownership_type, null);
        }
        // query params
        if ($business_description !== null) {
            $queryParams['business_description'] = ObjectSerializer::toQueryValue($business_description, null);
        }
        // query params
        if ($business_phone_number !== null) {
            $queryParams['business_phone_number'] = ObjectSerializer::toQueryValue($business_phone_number, null);
        }
        // query params
        if ($business_address_1 !== null) {
            $queryParams['business_address_1'] = ObjectSerializer::toQueryValue($business_address_1, null);
        }
        // query params
        if ($business_address_2 !== null) {
            $queryParams['business_address_2'] = ObjectSerializer::toQueryValue($business_address_2, null);
        }
        // query params
        if ($business_city !== null) {
            $queryParams['business_city'] = ObjectSerializer::toQueryValue($business_city, null);
        }
        // query params
        if ($business_state_province !== null) {
            $queryParams['business_state_province'] = ObjectSerializer::toQueryValue($business_state_province, null);
        }
        // query params
        if ($business_postal_code !== null) {
            $queryParams['business_postal_code'] = ObjectSerializer::toQueryValue($business_postal_code, null);
        }
        // query params
        if ($principle_first_name !== null) {
            $queryParams['principle_first_name'] = ObjectSerializer::toQueryValue($principle_first_name, null);
        }
        // query params
        if ($principle_last_name !== null) {
            $queryParams['principle_last_name'] = ObjectSerializer::toQueryValue($principle_last_name, null);
        }
        // query params
        if ($principle_ssn !== null) {
            $queryParams['principle_ssn'] = ObjectSerializer::toQueryValue($principle_ssn, null);
        }
        // query params
        if ($principle_date_of_birth !== null) {
            $queryParams['principle_date_of_birth'] = ObjectSerializer::toQueryValue($principle_date_of_birth, null);
        }
        // query params
        if ($principle_address_line_1 !== null) {
            $queryParams['principle_address_line_1'] = ObjectSerializer::toQueryValue($principle_address_line_1, null);
        }
        // query params
        if ($principle_address_line_2 !== null) {
            $queryParams['principle_address_line_2'] = ObjectSerializer::toQueryValue($principle_address_line_2, null);
        }
        // query params
        if ($principle_city !== null) {
            $queryParams['principle_city'] = ObjectSerializer::toQueryValue($principle_city, null);
        }
        // query params
        if ($principle_state_province !== null) {
            $queryParams['principle_state_province'] = ObjectSerializer::toQueryValue($principle_state_province, null);
        }
        // query params
        if ($principle_postal_code !== null) {
            $queryParams['principle_postal_code'] = ObjectSerializer::toQueryValue($principle_postal_code, null);
        }
        // query params
        if ($principle_title !== null) {
            $queryParams['principle_title'] = ObjectSerializer::toQueryValue($principle_title, null);
        }
        // query params
        if ($principle_ownership_percentage !== null) {
            $queryParams['principle_ownership_percentage'] = ObjectSerializer::toQueryValue($principle_ownership_percentage, null);
        }
        // query params
        if ($principle_phone_number !== null) {
            $queryParams['principle_phone_number'] = ObjectSerializer::toQueryValue($principle_phone_number, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settle
     *
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function settle($transaction_id, $ticket = null, $meta = null)
    {
        list($response) = $this->settleWithHttpInfo($transaction_id, $ticket, $meta);
        return $response;
    }

    /**
     * Operation settleWithHttpInfo
     *
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function settleWithHttpInfo($transaction_id, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->settleRequest($transaction_id, $ticket, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settleAsync
     *
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleAsync($transaction_id, $ticket = null, $meta = null)
    {
        return $this->settleAsyncWithHttpInfo($transaction_id, $ticket, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settleAsyncWithHttpInfo
     *
     * Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleAsyncWithHttpInfo($transaction_id, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->settleRequest($transaction_id, $ticket, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settle'
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function settleRequest($transaction_id, $ticket = null, $meta = null)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling settle'
            );
        }

        $resourcePath = '/settle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_id !== null) {
            $queryParams['transactionId'] = ObjectSerializer::toQueryValue($transaction_id, null);
        }
        // query params
        if ($ticket !== null) {
            $queryParams['ticket'] = ObjectSerializer::toQueryValue($ticket, null);
        }
        // query params
        if ($meta !== null) {
            $queryParams['meta'] = ObjectSerializer::toQueryValue($meta, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenize
     *
     * Create a token for later use.
     *
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function tokenize($cc, $mm, $yy, $cvv)
    {
        list($response) = $this->tokenizeWithHttpInfo($cc, $mm, $yy, $cvv);
        return $response;
    }

    /**
     * Operation tokenizeWithHttpInfo
     *
     * Create a token for later use.
     *
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenizeWithHttpInfo($cc, $mm, $yy, $cvv)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->tokenizeRequest($cc, $mm, $yy, $cvv);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenizeAsync
     *
     * Create a token for later use.
     *
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenizeAsync($cc, $mm, $yy, $cvv)
    {
        return $this->tokenizeAsyncWithHttpInfo($cc, $mm, $yy, $cvv)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenizeAsyncWithHttpInfo
     *
     * Create a token for later use.
     *
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenizeAsyncWithHttpInfo($cc, $mm, $yy, $cvv)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->tokenizeRequest($cc, $mm, $yy, $cvv);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenize'
     *
     * @param  string $cc Credit Card Number with or without dashes (required)
     * @param  string $mm 2 digit Month (required)
     * @param  string $yy 2 digit Year (required)
     * @param  string $cvv Card Verification Value found on the card (CVV2, CVC2, CID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenizeRequest($cc, $mm, $yy, $cvv)
    {
        // verify the required parameter 'cc' is set
        if ($cc === null || (is_array($cc) && count($cc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cc when calling tokenize'
            );
        }
        // verify the required parameter 'mm' is set
        if ($mm === null || (is_array($mm) && count($mm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mm when calling tokenize'
            );
        }
        // verify the required parameter 'yy' is set
        if ($yy === null || (is_array($yy) && count($yy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $yy when calling tokenize'
            );
        }
        // verify the required parameter 'cvv' is set
        if ($cvv === null || (is_array($cvv) && count($cvv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvv when calling tokenize'
            );
        }

        $resourcePath = '/tokenize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cc !== null) {
            $queryParams['cc'] = ObjectSerializer::toQueryValue($cc, null);
        }
        // query params
        if ($mm !== null) {
            $queryParams['mm'] = ObjectSerializer::toQueryValue($mm, null);
        }
        // query params
        if ($yy !== null) {
            $queryParams['yy'] = ObjectSerializer::toQueryValue($yy, null);
        }
        // query params
        if ($cvv !== null) {
            $queryParams['cvv'] = ObjectSerializer::toQueryValue($cvv, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation void
     *
     * A Void transaction can be used to back out a previous Sale transaction.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Response[]
     */
    public function void($transaction_id, $ticket = null, $meta = null)
    {
        list($response) = $this->voidWithHttpInfo($transaction_id, $ticket, $meta);
        return $response;
    }

    /**
     * Operation voidWithHttpInfo
     *
     * A Void transaction can be used to back out a previous Sale transaction.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function voidWithHttpInfo($transaction_id, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->voidRequest($transaction_id, $ticket, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidAsync
     *
     * A Void transaction can be used to back out a previous Sale transaction.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAsync($transaction_id, $ticket = null, $meta = null)
    {
        return $this->voidAsyncWithHttpInfo($transaction_id, $ticket, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidAsyncWithHttpInfo
     *
     * A Void transaction can be used to back out a previous Sale transaction.
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAsyncWithHttpInfo($transaction_id, $ticket = null, $meta = null)
    {
        $returnType = '\Swagger\Client\Model\Response[]';
        $request = $this->voidRequest($transaction_id, $ticket, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'void'
     *
     * @param  string $transaction_id Transaction ID of charged event. (required)
     * @param  string $ticket Ticket Number used by POS (optional)
     * @param  object $meta Optional user defined object to be returned with future response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidRequest($transaction_id, $ticket = null, $meta = null)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling void'
            );
        }

        $resourcePath = '/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_id !== null) {
            $queryParams['transactionId'] = ObjectSerializer::toQueryValue($transaction_id, null);
        }
        // query params
        if ($ticket !== null) {
            $queryParams['ticket'] = ObjectSerializer::toQueryValue($ticket, null);
        }
        // query params
        if ($meta !== null) {
            $queryParams['meta'] = ObjectSerializer::toQueryValue($meta, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
