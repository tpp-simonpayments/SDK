# coding: utf-8

"""
    Triple Play Pay API

    Payment API  # noqa: E501

    OpenAPI spec version: 1.0.1-oas3
    Contact: support@tripleplaypay.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate(self, activation_code, terminal_id, **kwargs):  # noqa: E501
        """Setup new Credit Card Terminal.  # noqa: E501

        Setup new Credit Card Terminal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate(activation_code, terminal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_code: Activation Code on Terminal Screen (required)
        :param str terminal_id: Custom Name of Terminal (required)
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_with_http_info(activation_code, terminal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_with_http_info(activation_code, terminal_id, **kwargs)  # noqa: E501
            return data

    def activate_with_http_info(self, activation_code, terminal_id, **kwargs):  # noqa: E501
        """Setup new Credit Card Terminal.  # noqa: E501

        Setup new Credit Card Terminal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_with_http_info(activation_code, terminal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activation_code: Activation Code on Terminal Screen (required)
        :param str terminal_id: Custom Name of Terminal (required)
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activation_code', 'terminal_id', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activation_code' is set
        if ('activation_code' not in params or
                params['activation_code'] is None):
            raise ValueError("Missing the required parameter `activation_code` when calling `activate`")  # noqa: E501
        # verify the required parameter 'terminal_id' is set
        if ('terminal_id' not in params or
                params['terminal_id'] is None):
            raise ValueError("Missing the required parameter `terminal_id` when calling `activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'activation_code' in params:
            query_params.append(('activationCode', params['activation_code']))  # noqa: E501
        if 'terminal_id' in params:
            query_params.append(('terminalId', params['terminal_id']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authorize(self, amount, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """Used to verify funds when the total amount of the purchase is unknown.  # noqa: E501

        Used to verify funds when the total amount of the purchase is unknown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorize(amount, cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit Month (required)
        :param str yy: 2 digit Year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authorize_with_http_info(amount, cc, mm, yy, cvv, **kwargs)  # noqa: E501
        else:
            (data) = self.authorize_with_http_info(amount, cc, mm, yy, cvv, **kwargs)  # noqa: E501
            return data

    def authorize_with_http_info(self, amount, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """Used to verify funds when the total amount of the purchase is unknown.  # noqa: E501

        Used to verify funds when the total amount of the purchase is unknown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorize_with_http_info(amount, cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit Month (required)
        :param str yy: 2 digit Year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount', 'cc', 'mm', 'yy', 'cvv', 'zipcode', 'ticket', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `authorize`")  # noqa: E501
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `authorize`")  # noqa: E501
        # verify the required parameter 'mm' is set
        if ('mm' not in params or
                params['mm'] is None):
            raise ValueError("Missing the required parameter `mm` when calling `authorize`")  # noqa: E501
        # verify the required parameter 'yy' is set
        if ('yy' not in params or
                params['yy'] is None):
            raise ValueError("Missing the required parameter `yy` when calling `authorize`")  # noqa: E501
        # verify the required parameter 'cvv' is set
        if ('cvv' not in params or
                params['cvv'] is None):
            raise ValueError("Missing the required parameter `cvv` when calling `authorize`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'cc' in params:
            query_params.append(('cc', params['cc']))  # noqa: E501
        if 'mm' in params:
            query_params.append(('mm', params['mm']))  # noqa: E501
        if 'yy' in params:
            query_params.append(('yy', params['yy']))  # noqa: E501
        if 'cvv' in params:
            query_params.append(('cvv', params['cvv']))  # noqa: E501
        if 'zipcode' in params:
            query_params.append(('zipcode', params['zipcode']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/authorize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def charge(self, amount, cc, mm, yy, cvv, account_number, routing_number, type, **kwargs):  # noqa: E501
        """Process payment or settle a previous charge. *card **bank  # noqa: E501

        Process payment or settle a previous charge. *card **bank  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.charge(amount, cc, mm, yy, cvv, account_number, routing_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit month (required)
        :param str yy: 2 digit year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str account_number: Bank Account Number (required)
        :param str routing_number: Bank Routing Number (required)
        :param str type: Options: checking, savings *default checking (required)
        :param str id: Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.charge_with_http_info(amount, cc, mm, yy, cvv, account_number, routing_number, type, **kwargs)  # noqa: E501
        else:
            (data) = self.charge_with_http_info(amount, cc, mm, yy, cvv, account_number, routing_number, type, **kwargs)  # noqa: E501
            return data

    def charge_with_http_info(self, amount, cc, mm, yy, cvv, account_number, routing_number, type, **kwargs):  # noqa: E501
        """Process payment or settle a previous charge. *card **bank  # noqa: E501

        Process payment or settle a previous charge. *card **bank  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.charge_with_http_info(amount, cc, mm, yy, cvv, account_number, routing_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit month (required)
        :param str yy: 2 digit year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str account_number: Bank Account Number (required)
        :param str routing_number: Bank Routing Number (required)
        :param str type: Options: checking, savings *default checking (required)
        :param str id: Transaction ID used to settle an authorized payment method (cc or bank info then not required) *optional synonym: transactionId
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount', 'cc', 'mm', 'yy', 'cvv', 'account_number', 'routing_number', 'type', 'id', 'zipcode', 'ticket', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `charge`")  # noqa: E501
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `charge`")  # noqa: E501
        # verify the required parameter 'mm' is set
        if ('mm' not in params or
                params['mm'] is None):
            raise ValueError("Missing the required parameter `mm` when calling `charge`")  # noqa: E501
        # verify the required parameter 'yy' is set
        if ('yy' not in params or
                params['yy'] is None):
            raise ValueError("Missing the required parameter `yy` when calling `charge`")  # noqa: E501
        # verify the required parameter 'cvv' is set
        if ('cvv' not in params or
                params['cvv'] is None):
            raise ValueError("Missing the required parameter `cvv` when calling `charge`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if ('account_number' not in params or
                params['account_number'] is None):
            raise ValueError("Missing the required parameter `account_number` when calling `charge`")  # noqa: E501
        # verify the required parameter 'routing_number' is set
        if ('routing_number' not in params or
                params['routing_number'] is None):
            raise ValueError("Missing the required parameter `routing_number` when calling `charge`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'cc' in params:
            query_params.append(('cc', params['cc']))  # noqa: E501
        if 'mm' in params:
            query_params.append(('mm', params['mm']))  # noqa: E501
        if 'yy' in params:
            query_params.append(('yy', params['yy']))  # noqa: E501
        if 'cvv' in params:
            query_params.append(('cvv', params['cvv']))  # noqa: E501
        if 'zipcode' in params:
            query_params.append(('zipcode', params['zipcode']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'routing_number' in params:
            query_params.append(('routingNumber', params['routing_number']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/charge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def credit(self, amount, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """A Credit transaction is used to refund a cardholder for a previous transaction.  # noqa: E501

        A Credit transaction is used to refund a cardholder for a previous transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.credit(amount, cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit month (required)
        :param str yy: 2 digit year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.credit_with_http_info(amount, cc, mm, yy, cvv, **kwargs)  # noqa: E501
        else:
            (data) = self.credit_with_http_info(amount, cc, mm, yy, cvv, **kwargs)  # noqa: E501
            return data

    def credit_with_http_info(self, amount, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """A Credit transaction is used to refund a cardholder for a previous transaction.  # noqa: E501

        A Credit transaction is used to refund a cardholder for a previous transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.credit_with_http_info(amount, cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str amount: The total transaction amount. This is the amount of funds to move on the card (required)
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit month (required)
        :param str yy: 2 digit year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :param str zipcode: Zip code. *optional synonym: zip
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount', 'cc', 'mm', 'yy', 'cvv', 'zipcode', 'ticket', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method credit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `credit`")  # noqa: E501
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `credit`")  # noqa: E501
        # verify the required parameter 'mm' is set
        if ('mm' not in params or
                params['mm'] is None):
            raise ValueError("Missing the required parameter `mm` when calling `credit`")  # noqa: E501
        # verify the required parameter 'yy' is set
        if ('yy' not in params or
                params['yy'] is None):
            raise ValueError("Missing the required parameter `yy` when calling `credit`")  # noqa: E501
        # verify the required parameter 'cvv' is set
        if ('cvv' not in params or
                params['cvv'] is None):
            raise ValueError("Missing the required parameter `cvv` when calling `credit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'cc' in params:
            query_params.append(('cc', params['cc']))  # noqa: E501
        if 'mm' in params:
            query_params.append(('mm', params['mm']))  # noqa: E501
        if 'yy' in params:
            query_params.append(('yy', params['yy']))  # noqa: E501
        if 'cvv' in params:
            query_params.append(('cvv', params['cvv']))  # noqa: E501
        if 'zipcode' in params:
            query_params.append(('zipcode', params['zipcode']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/credit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enroll(self, dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, **kwargs):  # noqa: E501
        """Enroll a new merchant or retrieve status of pending merchant.  # noqa: E501

        Enroll a new merchant or retrieve status of pending merchant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll(dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dba_name: Doing Business As name. <code>*</code> Only field necessary for GET. (required)
        :param str email: (required)
        :param str website: (required)
        :param str fed_tx_id: (required)
        :param str legal_name: Legal Business Name (required)
        :param str start_date: Business Start Date (required)
        :param str account_holder_name: (required)
        :param str account_type: (required)
        :param str account_number: Bank Account to deposit transactions.  (required)
        :param str routing_number: Bank Routing Number to deposit transactions. (required)
        :param str ownership_type: [\"Sole Proprietor\", \"C-Corp Private\", \"C-Corp Public\", \"S-Corp Private\", \"S-Corp Public\", \"LLC Private\", \"LLC Public\", \"Not For Profit\", \"Partnership Private\", \"Partnership\", \"Government Agency\"] (required)
        :param str business_description: (required)
        :param str business_phone_number: (required)
        :param str business_address_1: (required)
        :param str business_address_2: (required)
        :param str business_city: (required)
        :param str business_state_province: (required)
        :param str business_postal_code: (required)
        :param str principle_first_name: Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: <strong>2principle_first_name</strong> (required)
        :param str principle_last_name: Primary Owners Last Name. (required)
        :param str principle_ssn: Primary Owners Social Security Number (required)
        :param str principle_date_of_birth: (required)
        :param str principle_address_line_1: (required)
        :param str principle_address_line_2: (required)
        :param str principle_city: (required)
        :param str principle_state_province: (required)
        :param str principle_postal_code: (required)
        :param str principle_title: (required)
        :param str principle_ownership_percentage: (required)
        :param str principle_phone_number: (required)
        :param str stock_symbol:
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enroll_with_http_info(dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.enroll_with_http_info(dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, **kwargs)  # noqa: E501
            return data

    def enroll_with_http_info(self, dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, **kwargs):  # noqa: E501
        """Enroll a new merchant or retrieve status of pending merchant.  # noqa: E501

        Enroll a new merchant or retrieve status of pending merchant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_with_http_info(dba_name, email, website, fed_tx_id, legal_name, start_date, account_holder_name, account_type, account_number, routing_number, ownership_type, business_description, business_phone_number, business_address_1, business_address_2, business_city, business_state_province, business_postal_code, principle_first_name, principle_last_name, principle_ssn, principle_date_of_birth, principle_address_line_1, principle_address_line_2, principle_city, principle_state_province, principle_postal_code, principle_title, principle_ownership_percentage, principle_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dba_name: Doing Business As name. <code>*</code> Only field necessary for GET. (required)
        :param str email: (required)
        :param str website: (required)
        :param str fed_tx_id: (required)
        :param str legal_name: Legal Business Name (required)
        :param str start_date: Business Start Date (required)
        :param str account_holder_name: (required)
        :param str account_type: (required)
        :param str account_number: Bank Account to deposit transactions.  (required)
        :param str routing_number: Bank Routing Number to deposit transactions. (required)
        :param str ownership_type: [\"Sole Proprietor\", \"C-Corp Private\", \"C-Corp Public\", \"S-Corp Private\", \"S-Corp Public\", \"LLC Private\", \"LLC Public\", \"Not For Profit\", \"Partnership Private\", \"Partnership\", \"Government Agency\"] (required)
        :param str business_description: (required)
        :param str business_phone_number: (required)
        :param str business_address_1: (required)
        :param str business_address_2: (required)
        :param str business_city: (required)
        :param str business_state_province: (required)
        :param str business_postal_code: (required)
        :param str principle_first_name: Primary Owners First Name. Adding a number to the parameter allows for adding multiple principle owners. Example: <strong>2principle_first_name</strong> (required)
        :param str principle_last_name: Primary Owners Last Name. (required)
        :param str principle_ssn: Primary Owners Social Security Number (required)
        :param str principle_date_of_birth: (required)
        :param str principle_address_line_1: (required)
        :param str principle_address_line_2: (required)
        :param str principle_city: (required)
        :param str principle_state_province: (required)
        :param str principle_postal_code: (required)
        :param str principle_title: (required)
        :param str principle_ownership_percentage: (required)
        :param str principle_phone_number: (required)
        :param str stock_symbol:
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dba_name', 'email', 'website', 'fed_tx_id', 'legal_name', 'start_date', 'account_holder_name', 'account_type', 'account_number', 'routing_number', 'ownership_type', 'business_description', 'business_phone_number', 'business_address_1', 'business_address_2', 'business_city', 'business_state_province', 'business_postal_code', 'principle_first_name', 'principle_last_name', 'principle_ssn', 'principle_date_of_birth', 'principle_address_line_1', 'principle_address_line_2', 'principle_city', 'principle_state_province', 'principle_postal_code', 'principle_title', 'principle_ownership_percentage', 'principle_phone_number', 'stock_symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enroll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dba_name' is set
        if ('dba_name' not in params or
                params['dba_name'] is None):
            raise ValueError("Missing the required parameter `dba_name` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'website' is set
        if ('website' not in params or
                params['website'] is None):
            raise ValueError("Missing the required parameter `website` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'fed_tx_id' is set
        if ('fed_tx_id' not in params or
                params['fed_tx_id'] is None):
            raise ValueError("Missing the required parameter `fed_tx_id` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'legal_name' is set
        if ('legal_name' not in params or
                params['legal_name'] is None):
            raise ValueError("Missing the required parameter `legal_name` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'account_holder_name' is set
        if ('account_holder_name' not in params or
                params['account_holder_name'] is None):
            raise ValueError("Missing the required parameter `account_holder_name` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if ('account_number' not in params or
                params['account_number'] is None):
            raise ValueError("Missing the required parameter `account_number` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'routing_number' is set
        if ('routing_number' not in params or
                params['routing_number'] is None):
            raise ValueError("Missing the required parameter `routing_number` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'ownership_type' is set
        if ('ownership_type' not in params or
                params['ownership_type'] is None):
            raise ValueError("Missing the required parameter `ownership_type` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_description' is set
        if ('business_description' not in params or
                params['business_description'] is None):
            raise ValueError("Missing the required parameter `business_description` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_phone_number' is set
        if ('business_phone_number' not in params or
                params['business_phone_number'] is None):
            raise ValueError("Missing the required parameter `business_phone_number` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_address_1' is set
        if ('business_address_1' not in params or
                params['business_address_1'] is None):
            raise ValueError("Missing the required parameter `business_address_1` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_address_2' is set
        if ('business_address_2' not in params or
                params['business_address_2'] is None):
            raise ValueError("Missing the required parameter `business_address_2` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_city' is set
        if ('business_city' not in params or
                params['business_city'] is None):
            raise ValueError("Missing the required parameter `business_city` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_state_province' is set
        if ('business_state_province' not in params or
                params['business_state_province'] is None):
            raise ValueError("Missing the required parameter `business_state_province` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'business_postal_code' is set
        if ('business_postal_code' not in params or
                params['business_postal_code'] is None):
            raise ValueError("Missing the required parameter `business_postal_code` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_first_name' is set
        if ('principle_first_name' not in params or
                params['principle_first_name'] is None):
            raise ValueError("Missing the required parameter `principle_first_name` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_last_name' is set
        if ('principle_last_name' not in params or
                params['principle_last_name'] is None):
            raise ValueError("Missing the required parameter `principle_last_name` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_ssn' is set
        if ('principle_ssn' not in params or
                params['principle_ssn'] is None):
            raise ValueError("Missing the required parameter `principle_ssn` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_date_of_birth' is set
        if ('principle_date_of_birth' not in params or
                params['principle_date_of_birth'] is None):
            raise ValueError("Missing the required parameter `principle_date_of_birth` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_address_line_1' is set
        if ('principle_address_line_1' not in params or
                params['principle_address_line_1'] is None):
            raise ValueError("Missing the required parameter `principle_address_line_1` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_address_line_2' is set
        if ('principle_address_line_2' not in params or
                params['principle_address_line_2'] is None):
            raise ValueError("Missing the required parameter `principle_address_line_2` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_city' is set
        if ('principle_city' not in params or
                params['principle_city'] is None):
            raise ValueError("Missing the required parameter `principle_city` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_state_province' is set
        if ('principle_state_province' not in params or
                params['principle_state_province'] is None):
            raise ValueError("Missing the required parameter `principle_state_province` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_postal_code' is set
        if ('principle_postal_code' not in params or
                params['principle_postal_code'] is None):
            raise ValueError("Missing the required parameter `principle_postal_code` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_title' is set
        if ('principle_title' not in params or
                params['principle_title'] is None):
            raise ValueError("Missing the required parameter `principle_title` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_ownership_percentage' is set
        if ('principle_ownership_percentage' not in params or
                params['principle_ownership_percentage'] is None):
            raise ValueError("Missing the required parameter `principle_ownership_percentage` when calling `enroll`")  # noqa: E501
        # verify the required parameter 'principle_phone_number' is set
        if ('principle_phone_number' not in params or
                params['principle_phone_number'] is None):
            raise ValueError("Missing the required parameter `principle_phone_number` when calling `enroll`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dba_name' in params:
            query_params.append(('dba_name', params['dba_name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'website' in params:
            query_params.append(('website', params['website']))  # noqa: E501
        if 'fed_tx_id' in params:
            query_params.append(('fed_tx_id', params['fed_tx_id']))  # noqa: E501
        if 'legal_name' in params:
            query_params.append(('legal_name', params['legal_name']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'account_holder_name' in params:
            query_params.append(('account_holder_name', params['account_holder_name']))  # noqa: E501
        if 'account_type' in params:
            query_params.append(('account_type', params['account_type']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('account_number', params['account_number']))  # noqa: E501
        if 'routing_number' in params:
            query_params.append(('routing_number', params['routing_number']))  # noqa: E501
        if 'stock_symbol' in params:
            query_params.append(('stock_symbol', params['stock_symbol']))  # noqa: E501
        if 'ownership_type' in params:
            query_params.append(('ownership_type', params['ownership_type']))  # noqa: E501
        if 'business_description' in params:
            query_params.append(('business_description', params['business_description']))  # noqa: E501
        if 'business_phone_number' in params:
            query_params.append(('business_phone_number', params['business_phone_number']))  # noqa: E501
        if 'business_address_1' in params:
            query_params.append(('business_address_1', params['business_address_1']))  # noqa: E501
        if 'business_address_2' in params:
            query_params.append(('business_address_2', params['business_address_2']))  # noqa: E501
        if 'business_city' in params:
            query_params.append(('business_city', params['business_city']))  # noqa: E501
        if 'business_state_province' in params:
            query_params.append(('business_state_province', params['business_state_province']))  # noqa: E501
        if 'business_postal_code' in params:
            query_params.append(('business_postal_code', params['business_postal_code']))  # noqa: E501
        if 'principle_first_name' in params:
            query_params.append(('principle_first_name', params['principle_first_name']))  # noqa: E501
        if 'principle_last_name' in params:
            query_params.append(('principle_last_name', params['principle_last_name']))  # noqa: E501
        if 'principle_ssn' in params:
            query_params.append(('principle_ssn', params['principle_ssn']))  # noqa: E501
        if 'principle_date_of_birth' in params:
            query_params.append(('principle_date_of_birth', params['principle_date_of_birth']))  # noqa: E501
        if 'principle_address_line_1' in params:
            query_params.append(('principle_address_line_1', params['principle_address_line_1']))  # noqa: E501
        if 'principle_address_line_2' in params:
            query_params.append(('principle_address_line_2', params['principle_address_line_2']))  # noqa: E501
        if 'principle_city' in params:
            query_params.append(('principle_city', params['principle_city']))  # noqa: E501
        if 'principle_state_province' in params:
            query_params.append(('principle_state_province', params['principle_state_province']))  # noqa: E501
        if 'principle_postal_code' in params:
            query_params.append(('principle_postal_code', params['principle_postal_code']))  # noqa: E501
        if 'principle_title' in params:
            query_params.append(('principle_title', params['principle_title']))  # noqa: E501
        if 'principle_ownership_percentage' in params:
            query_params.append(('principle_ownership_percentage', params['principle_ownership_percentage']))  # noqa: E501
        if 'principle_phone_number' in params:
            query_params.append(('principle_phone_number', params['principle_phone_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/enroll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report(self, **kwargs):  # noqa: E501
        """Get transaction detail history  # noqa: E501

        Get transaction detail history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start: Start of date range YYYY-MM-DD **defaults to that day
        :param str end: End of date range YYYY-MM-DD
        :param str dates: Optional list of range, example: [\"YYYY-MM-DD\",\"YYYY-MM-DD\"]
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.report_with_http_info(**kwargs)  # noqa: E501
            return data

    def report_with_http_info(self, **kwargs):  # noqa: E501
        """Get transaction detail history  # noqa: E501

        Get transaction detail history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start: Start of date range YYYY-MM-DD **defaults to that day
        :param str end: End of date range YYYY-MM-DD
        :param str dates: Optional list of range, example: [\"YYYY-MM-DD\",\"YYYY-MM-DD\"]
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'dates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'dates' in params:
            query_params.append(('dates', params['dates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settle(self, id, **kwargs):  # noqa: E501
        """Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.  # noqa: E501

        Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Transaction ID of charged event. *optional synonym: transactionId (required)
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settle_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.settle_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def settle_with_http_info(self, id, **kwargs):  # noqa: E501
        """Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.  # noqa: E501

        Alternative to sending a transactionId to charge, this method will settle an outstanding Authorization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Transaction ID of charged event. *optional synonym: transactionId (required)
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ticket', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/settle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokenize(self, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """Create a token for later use.  # noqa: E501

        Create a token for later use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenize(cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit Month (required)
        :param str yy: 2 digit Year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokenize_with_http_info(cc, mm, yy, cvv, **kwargs)  # noqa: E501
        else:
            (data) = self.tokenize_with_http_info(cc, mm, yy, cvv, **kwargs)  # noqa: E501
            return data

    def tokenize_with_http_info(self, cc, mm, yy, cvv, **kwargs):  # noqa: E501
        """Create a token for later use.  # noqa: E501

        Create a token for later use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenize_with_http_info(cc, mm, yy, cvv, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc: Credit Card Number with or without dashes (required)
        :param str mm: 2 digit Month (required)
        :param str yy: 2 digit Year (required)
        :param str cvv: Card Verification Value found on the card (CVV2, CVC2, CID) (required)
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc', 'mm', 'yy', 'cvv']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokenize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `tokenize`")  # noqa: E501
        # verify the required parameter 'mm' is set
        if ('mm' not in params or
                params['mm'] is None):
            raise ValueError("Missing the required parameter `mm` when calling `tokenize`")  # noqa: E501
        # verify the required parameter 'yy' is set
        if ('yy' not in params or
                params['yy'] is None):
            raise ValueError("Missing the required parameter `yy` when calling `tokenize`")  # noqa: E501
        # verify the required parameter 'cvv' is set
        if ('cvv' not in params or
                params['cvv'] is None):
            raise ValueError("Missing the required parameter `cvv` when calling `tokenize`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cc' in params:
            query_params.append(('cc', params['cc']))  # noqa: E501
        if 'mm' in params:
            query_params.append(('mm', params['mm']))  # noqa: E501
        if 'yy' in params:
            query_params.append(('yy', params['yy']))  # noqa: E501
        if 'cvv' in params:
            query_params.append(('cvv', params['cvv']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tokenize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def void(self, id, **kwargs):  # noqa: E501
        """A Void transaction can be used to back out a previous Sale transaction.  # noqa: E501

        A Void transaction can be used to back out a previous Sale transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.void(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Transaction ID of charged event. *optional synonym: transactionId (required)
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.void_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.void_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def void_with_http_info(self, id, **kwargs):  # noqa: E501
        """A Void transaction can be used to back out a previous Sale transaction.  # noqa: E501

        A Void transaction can be used to back out a previous Sale transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.void_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Transaction ID of charged event. *optional synonym: transactionId (required)
        :param str ticket: Ticket Number used by POS
        :param object meta: Optional user defined object to be returned with future response
        :return: list[Response]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ticket', 'meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `void`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/void', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Response]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
