# coding: utf-8

"""
    Triple Play Pay API

    Payment API  # noqa: E501

    OpenAPI spec version: 1.0.1-oas3
    Contact: support@tripleplaypay.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'bool',
        'id': 'str',
        'message': 'object',
        'meta': 'object',
        'method': 'str'
    }

    attribute_map = {
        'status': 'status',
        'id': 'id',
        'message': 'message',
        'meta': 'meta',
        'method': 'method'
    }

    def __init__(self, status=None, id=None, message=None, meta=None, method=None):  # noqa: E501
        """Response - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._id = None
        self._message = None
        self._meta = None
        self._method = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if meta is not None:
            self.meta = meta
        if method is not None:
            self.method = method

    @property
    def status(self):
        """Gets the status of this Response.  # noqa: E501


        :return: The status of this Response.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.


        :param status: The status of this Response.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def id(self):
        """Gets the id of this Response.  # noqa: E501


        :return: The id of this Response.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Response.


        :param id: The id of this Response.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this Response.  # noqa: E501


        :return: The message of this Response.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Response.


        :param message: The message of this Response.  # noqa: E501
        :type: object
        """

        self._message = message

    @property
    def meta(self):
        """Gets the meta of this Response.  # noqa: E501


        :return: The meta of this Response.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Response.


        :param meta: The meta of this Response.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def method(self):
        """Gets the method of this Response.  # noqa: E501


        :return: The method of this Response.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Response.


        :param method: The method of this Response.  # noqa: E501
        :type: str
        """

        self._method = method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
